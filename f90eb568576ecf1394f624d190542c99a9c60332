Revision: f90eb568576ecf1394f624d190542c99a9c60332
Patch-set: 3
File: /COMMIT_MSG

14
Fri Mar 20 21:44:10 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 46825452_205608b5
Bytes: 114
Wasn't able to reproduce this one, but all the others are definitely broken on Windows (using a 5.1 system image).

14
Fri Mar 20 21:52:50 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 46825452_205608b5
UUID: 66259842_75b11b73
Bytes: 593
Here's what I see with the adb.exe from the SDK platform-tools 22 (in other words, without my changes):

C:\> where adb.exe
C:\Program Files\Android\android-sdk\platform-tools\adb.exe

C:\> adb version
Android Debug Bridge version 1.0.32

C:\> adb shell
* daemon not running. starting it now on port 5037 *
* daemon started successfully *
shell@flo:/ $ echo hi
echo hi
hi
shell@flo:/ $ exit
exit

-- So that's what I mean by everything typed is displayed twice ("echo hi" and "exit" are shown twice in the console window, once when I typed it, and then it was echoed back after hitting Enter).

14
Fri Mar 20 21:55:15 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 66259842_75b11b73
UUID: 46825452_80e33447
Bytes: 243
Oh, I misunderstood. I thought you meant you were seeing it duplicated for each character (like on some poorly configured serial console).

Yes, the line gets is echoed, confirmed. Going to apply your patch now and verify that these are fixed.

File: adb/commandline.cpp

250
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 068cdc85_1746a482
Bytes: 37
Don't indent in extern "C" {} blocks.

250
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 068cdc85_1746a482
UUID: 267f204e_a1e73ed9
Bytes: 4
Done

File: adb/sysdeps_win32.c

2291
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 068cdc85_178ea483
Bytes: 129
Could you trim the lines down to 80 characters?

Also, the return type is a boolean in disguise. Might as well just make it bool.

2291
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 068cdc85_178ea483
UUID: 06869c96_601e1291
Bytes: 326
I trimmed all lines down to 80 chars.

The reason I had the return type as int was to follow unix convention of success=0, error=-1 with errno. If you want me to change this to bool, let me know your preferences (bool vs. Win32 BOOL, success=true or false, where to stuff the error code (errno or Win32 GetLastError()), etc.).

2291
Thu Mar 26 16:53:16 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 06869c96_601e1291
UUID: 639caa2a_bba647b7
Bytes: 123
Definitely change it to a bool (stdbool's bool, not BOOL). Using the UNIX 0/-1 return style everywhere in adb is a bug IMO.

2291
Thu Mar 26 19:28:02 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 639caa2a_bba647b7
UUID: c3971601_41a4f42b
Bytes: 43
I changed it to bool with true for success.

2301:36-2301:56
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 46825452_c6b2b4d7
Bytes: 186
I'd make it abort() then, with a log message above it.

Once I get around to making system/core/base/file.cpp play nice on Windows, this should just become 

    CHECK_NE(read_count, 0);

2301:36-2301:56
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 46825452_c6b2b4d7
UUID: 267f204e_41a83256
Bytes: 96
Seems like fatal() is the helper to use in this codebase, so I used that instead of D()+abort().

2305:33-2305:56
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 46825452_66d668f0
Bytes: 4
same

2305:33-2305:56
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 46825452_66d668f0
UUID: 267f204e_c18282d5
Bytes: 62
I used fatal() again and removed the errno setting and return.

2310:0-2316:9
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 068cdc85_491a5473
Bytes: 197
This might be more clear as

    if (input_record->EventType == KEY_EVENT &&
        input_record->Event.KeyEvent.bKeyDown) {
        return true;
    }

The return on line 2323 would then go away.

2310:0-2316:9
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 068cdc85_491a5473
UUID: 467c1457_427032d7
Bytes: 73
Done. To do this, I had to move the wRepeatCount check inside this block.

2318:62-2318:85
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 46825452_26970022
Bytes: 4
same

2318:62-2318:85
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 46825452_26970022
UUID: 267f204e_415672e8
Bytes: 21
I used fatal() again.

2372
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 86160cff_b7e7a2d9
Bytes: 30
Do they not exist in a header?

2372
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 86160cff_b7e7a2d9
UUID: 06869c96_e03f82d9
Bytes: 150
As far as I can tell, they do not. MSDN doesn't list constants either. https://msdn.microsoft.com/en-us/library/windows/desktop/ms646316(v=vs.85).aspx

2391:37-2391:40
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a69cf0d8_10c2eab1
Bytes: 23
kill the padding spaces

2391:37-2391:40
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a69cf0d8_10c2eab1
UUID: 467c1457_c24a8286
Bytes: 4
Done

2409:4-2410:37
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 86160cff_975a66d7
Bytes: 517
Maybe reorganize the function like so:

    static char _get_char... {
        if (key_even->uChar.AsciiChar != 0) {
            return key_even->uChar.AsciiChar;
        }
        
        // Now the masking off of the modifier keys.
        // ...
        
        if (ToAscii(...) == 1) {
            return (char)translated;
        }
        
        return '\0';
    }

There doesn't seem to be any reason to use the length return and a char* for the out when all you're doing is returning 0 if *ch == 0 else 1.

2409:4-2410:37
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 86160cff_975a66d7
UUID: 267f204e_e1d4e6c3
Bytes: 365
The reason this function uses the length return+char* is because all of the buffer code deals with a length+char*, so it keeps it all consistent and easy to read at the callsites. If I change this, IMO, the readability of at least 2-3 callsites would decrease. That being said, if you feel strongly that this makes more sense, let me know and I can make the change.

2409:4-2410:37
Thu Mar 26 16:53:16 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 267f204e_e1d4e6c3
UUID: a3922212_fdd9271f
Bytes: 84
It would help this function, but if it dirties up the callsites we'll keep it as-is.

2409:4-2410:37
Thu Mar 26 19:28:02 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a3922212_fdd9271f
UUID: c3971601_e198a0f5
Bytes: 138
Ok, I'll keep it for now. If you reconsider and want me to attempt the change (in this commit or in a follow-up commit), just let me know.

2436:14-2436:30
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a69cf0d8_33a290ef
Bytes: 71
get_control_character? (at least that seems to be what's going on here)

2436:14-2436:30
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a69cf0d8_33a290ef
UUID: 267f204e_01f1ca64
Bytes: 232
Ok, I renamed it to _get_control_character(). The reason I originally had it as 'mapped' was because maybe in the future it will may something other than control-related characters. But I think renaming is fine for now, so I did it.

2442
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 86160cff_979266a6
Bytes: 154
You don't actually want ctrl-2 to map to the control character, right? Just ctrl-@.

Also, case statements should have the same indentation as the switch.

2442
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 86160cff_979266a6
UUID: 06869c96_80515637
Bytes: 315
When I press Ctrl-2 in Gnome Terminal and xterm, I get a NULL byte. All of these mappings were experimentally determined by trying all combinations in Gnome Terminal. If I've made an error and something doesn't match Gnome Terminal (or my VM is screwing me up), let me know.

I fixed the case statement indentation.

2442
Thu Mar 26 16:53:16 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 06869c96_80515637
UUID: 639caa2a_3be8f7a5
Bytes: 90
Never mind, you're correct. Don't know what I screwed up when I tried this the first time.

2442
Thu Mar 26 19:28:02 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 639caa2a_3be8f7a5
UUID: 831efe57_b7640292
Bytes: 2
ok

2447
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c6a1e40d_d444d478
Bytes: 27
Same for the rest of these.

2447
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c6a1e40d_d444d478
UUID: 467c1457_e2b6a6ed
Bytes: 37
My previous comment applies here too.

2489
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 86160cff_77218a1f
Bytes: 15
Same as before.

2489
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 86160cff_77218a1f
UUID: 06869c96_a0ac9a9f
Bytes: 235
If you're referring to the length+char* convention, my same previous comment applies (the reason is to keep buffer code callsites simple). Again, if you strongly think that I should change this, let me know and I'll take a crack at it.

2544
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 86160cff_5ad63546
Bytes: 67
Is this really necessary? Windows doesn't translate numlock for us?

2544
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 86160cff_5ad63546
UUID: 267f204e_8114faf5
Bytes: 428
As far as I can tell, yes, this craziness is really necessary. I think what is going on is that when NumLock is on and Shift is pressed, Windows 'neutralizes' the NumLock (since Shift is down), so that the resulting keys are properly translated -- so Windows is actually doing proper translation of NumLock, it's just that it's hiding the fact that Shift is physically down, which happens to be something that we want to detect.

2559
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a69cf0d8_d6bb3ad5
Bytes: 86
Move this check to be the first thing in the function and return early if it isn't on.

2559
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a69cf0d8_d6bb3ad5
UUID: 467c1457_02bc6acc
Bytes: 4
Done

2596:13-2596:15
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c6a1e40d_0b9e32e3
Bytes: 40
|= is a little more intention revealing.

2596:13-2596:15
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c6a1e40d_0b9e32e3
UUID: 06869c96_00bc66cc
Bytes: 44
I changed all the += to |= in this function.

2720
Mon Mar 23 17:57:13 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c6a1e40d_ce455877
Bytes: 34
#undef all these when you're done.

2720
Mon Mar 23 22:24:46 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c6a1e40d_ce455877
UUID: 467c1457_22a16ea2
Bytes: 4
Done

