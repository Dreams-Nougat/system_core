Revision: 55425eccacc9ef5f2bdae39f85851ba25d7e011a
Patch-set: 1
File: adb/adb.c

743
Thu Nov 15 21:20:16 2012 +0000
Author: Kenny Root <1002975@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: AAALoH///s0=
Bytes: 35
Shouldn't you check for truncation?

743
Fri Nov 16 11:08:10 2012 +0000
Author: David Turner <1000411@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: AAALoH///s0=
UUID: AAALr3///8U=
Bytes: 1015
This is done by snprintf().

The idea is that the format_xxx functions use the same convention that snprintf() on Posix: always perform safe truncation (i.e. always append a final zero), but return the size of the full string anyway.

This allows you to call the function twice, the first time with buffer == NULL and buffer_len == 0, and the function returns the number of bytes you need for the output.

The second time, you call it with buffer != NULL, and buffer_len = required_size + 1, the extra 1 is required for the terminating zero (if you use required_size instead, the zero gets tucked at the end, erasing your last byte).

That's what the format_listeners code does.

We can't just return the value of snprintf() here directly because on Windows, the function is broken and will return -1 in case of truncation (yeah), and this code runs on the host.

If you prefer, I can use a different convention, but then I'll have to implement two functions: one to compute the size, and the other to do the write.

744
Mon Nov 19 18:45:53 2012 +0000
Author: JP Abgrall <1005480@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: AAALn3//+KQ=
Bytes: 19
cr vs lf vs cr- lf?

744
Tue Nov 20 14:53:01 2012 +0000
Author: David Turner <1000411@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: AAALn3//+KQ=
UUID: AAALyX///74=
Bytes: 853
I'm not sure what you mean here, but just in case:

This string is generated in the ADB server daemon, and later passed to the client, which could be running on a different machine / OS.

For Windows, the conversion from \n to \r\n should be done in the client code. This actually happens through a simple printf(), which does that automatically on this platform (that's the reason why printf("Hello World\n") works correctly too).

Using \r\n when the daemon runs on Windows would create problems for Linux clients accessing the daemon through a SSH tunnel, for example.

Always generating \r\n is going to create problems for scripts and programs using the output of "adb forward --list" on non-Windows machines. That is, very unfortunately, a _very_ common complaint with "adb shell" that does just that for reasons that still elude me at the moment.

1614
Mon Nov 19 18:45:53 2012 +0000
Author: JP Abgrall <1005480@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: AAALn3//+IM=
Bytes: 110
install_listener() can return -2 also and can be called with or without no_rebind.

   (!no_rebind && r < 0) ?

1614
Tue Nov 20 14:53:01 2012 +0000
Author: David Turner <1000411@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: AAALn3//+IM=
UUID: AAALyX///70=
Bytes: 600
install_listener returns -2 when it can't actually bind() to the address, that's handled by the "else" portion here, i.e. it will print "cannot bind socket".

install_listener returns -1 when it cannot do one of the following:
- detects that there is an attempt to rebind the smart socket (independent of no_rebind).
- or detect that there is an attempt to rebind a normal socket with no_rebind == 1.

I thought that "cannot rebind socket" was generic and informative enough, but if you prefer, I can distinguish both cases (e.g. make the function return -3 or something). Let me know what you think.

File: adb/commandline.c

1284
Tue Nov 20 14:53:01 2012 +0000
Author: David Turner <1000411@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: AAALyX///7w=
Bytes: 50
this is what converts the \n into \r\n on Windows.

