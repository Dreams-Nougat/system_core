Revision: 696817d3524e2fb8bbbcc2ec3526f4383f789163
Patch-set: 4
File: liblog/log_read.c

313
Tue Apr 22 00:16:22 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5a4cb87_236f8a7e
Bytes: 43
won't this cause trouble on loaded systems?

313
Tue Apr 22 00:31:16 2014 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5a4cb87_236f8a7e
UUID: 45b4efaf_4bd7395d
Bytes: 1179
Yes, it *may*, this is a heuristic. I chatted with Colin on this. We currently use 5ms for turnaround timing in other code when dealing with a UNIX domain socket. The write breakup is done inside the kernel (and not in user space on the sender side) and is part of the sk layers, and is not at the application level. We chose to up this to 20ms instead of 5ms here because experience has shown that when user space is involved, this is virtually guaranteed (scheduler, no hardware involvement, with a 100 value for HZ) as *poll* will also suffer pushback when the system is loaded and stretch user space. We may re-address the 5ms value we use elsewhere, but so far no bugs have been reported.

Keep in mind that logcat -S output is currently a developer feature, and is *only* producing output in the 40KB range on first boot after a complete wipe. After a reboot, the statistics will not exceed 16KB even after running for a week (with dex2oat finished). The most important (interpreted) data is within the first 16KB in any case, the remainder is more for completeness of raw information than anything and this was an overly valiant effort to try to resolve getting truncated.

