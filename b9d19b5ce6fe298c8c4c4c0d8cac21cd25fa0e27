Revision: b9d19b5ce6fe298c8c4c4c0d8cac21cd25fa0e27
Patch-set: 1
File: libcutils/socket_inaddr_any_server.c

49:44-49:58
Mon May 05 16:59:20 2014 +0000
Author: Greg Hackmann <1015340@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a2fd4b4_6533201b
Bytes: 304
This generates a warning on mingw because winsock inexplicably expects const char *.  See http://msdn.microsoft.com/en-us/library/windows/desktop/ms740476(v=vs.85).aspx

The fix is to cast to const char *.  winsock gets what it wants and Berkeley sockets will still accept the more specific pointer type.

49:44-49:58
Mon May 05 17:07:58 2014 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a2fd4b4_6533201b
UUID: 8aba749a_247c6e91
Bytes: 132
yes, I saw the references to char * in other areas of code in our tree, did not know the significance of them, thanks for the catch!

File: libcutils/str_parms.c

27:0-35:6
Mon May 05 16:23:57 2014 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a2fd4b4_e20726a3
Bytes: 120
This is a result in a flaw in the toolset, recommend the sdk team investigate and find a way to nullify this adjustment.

27:0-35:6
Mon May 05 16:59:20 2014 +0000
Author: Greg Hackmann <1015340@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a2fd4b4_e20726a3
UUID: 8aba749a_a40cde58
Bytes: 300
Not really a flaw in the toolchain; Windows's C runtime doesn't include these functions.

Is str_parms ever actually used by any host code?  Otherwise I'd expect breakage at link time.

I prefer just disabling -Werror while investigating.  It's ugly but less ugly than silencing a legitimate warning.

27:0-35:6
Mon May 05 17:07:58 2014 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8aba749a_a40cde58
UUID: aacbb83b_8022e43c
Bytes: 269
What about removing str_parms.c from the host build? That would be a more accurate check of whether it is used (expecting a link error when I build without).

Do we want to ifdef to use alternate handlers (strtok(), strdup() and malloc()+snprintf()) if the above fails?

27:0-35:6
Mon May 05 17:16:01 2014 +0000
Author: Greg Hackmann <1015340@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aacbb83b_8022e43c
UUID: 8a2fd4b4_e5ad7088
Bytes: 331
Short term just disable -Werror, we can investigate the right solution once the build is unbroken.

Medium term we should determine whether this belongs in a host build, and if so use the corresponding Windows CRT functions on mingw builds.  Windows has stdio extensions which are often very similar to the missing POSIX functions.

27:0-35:6
Mon May 05 17:25:56 2014 +0000
Author: raphael <1001100@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aacbb83b_8022e43c
UUID: aacbb83b_602b380b
Bytes: 775
I'd go for that. I'm in favor of disabling whole library functions that are never used in windows host apps and only provide a complex re-implementation if truly useful. Otherwise you risk wasting your time writing an implementation that is never actually tested and if someone calls it later, it might be buggy and nobody knows.

If you do that, please add a HAVE_METHOD_NAME in build/core/combo/include/arch/*/AndroidConfig.h that is defined for all platforms except Windows. I'd like to avoid sprinkling the code base with #ifndef _WIN32 as much as possible. It's more work to add a HAVE_xyz define but it's way more expressive of why something is missing.

Also please don't undef WIN32 (it's ok for local testing but I'm always worried that would get merged by mistake).

