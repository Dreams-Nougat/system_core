Revision: d35ce3563b4d86702cec4c8f7031fb8a1c55cac2
Patch-set: 3
File: mkbootimg/bootimg.h

51
Tue Sep 10 19:18:33 2013 +0000
Author: Dima Zavin <1000413@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 27529551_4193684c
Bytes: 370
let's add another two fields here:

   uint32_t hdr_version;
   uint32_t hdr_len;

This way we can manage future expansion. Should now set the version to 1 (maybe add a define at top and describe what the new version means), and then set len to sizeof(boot_img_hdr).

This way you can test the version in the bootloader/fastboot implementaiton thingie and go from there.

51
Tue Sep 10 19:34:08 2013 +0000
Author: Andrew P Boie <1011333@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 27529551_4193684c
UUID: 27529551_c15f787c
Bytes: 358
I don't think we can do this. Let's say a device has bootimages with header version 0 on it. Then you want to create an incremental OTA update. If mkbootimg is now creating version 1 headers, how can we instruct it to generate version 0 for the source target files package? If it is always generating version 1 headers then the binary diffs won't be correct.

51
Tue Sep 10 19:41:43 2013 +0000
Author: Dima Zavin <1000413@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 27529551_c15f787c
UUID: c768d904_35e31050
Bytes: 505
If the bootloader only supports version 0, it won't know to look for extra_cmdline or even bother with looking at the version field. But that's not what you are asking I don't think.

Why won't the diffs be correct? Maybe I'm missing something, I haven't looked at what assumptions recovery makes about boot images. From what I understand, the OTA source should be generated from a previous build, which would have been created before these changes were in, and thus would have the version field set to 0.

51
Tue Sep 10 19:47:38 2013 +0000
Author: Andrew P Boie <1011333@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c768d904_35e31050
UUID: c768d904_b51d607f
Bytes: 596
OTA updates are generated from a target files package. The boot images have not been built. Instead, during the ota_from_target_files process, mkbootimg is run to create boot images for both source and target. This is why you have to be very very very careful if you ever change mkbootimg as the boot images generated must match bit-for-bit what is already on the device.

The reason why the boot images aren't prebuilt inside the taget-files-package (as far as I can determine) is so that sign-target-files-apks can replace the key used to verify OTA updates inside the recovery console ramdisk.

