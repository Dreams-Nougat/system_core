Revision: 8e28a079902983c16015a0b1155153c13c2339a3
Patch-set: 3
File: include/nativebridge/native_bridge.h

149:39-149:60
Wed May 06 03:55:56 2015 +0000
Author: Jinghui Gu <1051763@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d36f5df_d2654491
Bytes: 145
Can we merge this new interface at the end of existing NativeBridgeCallbacks? Because we don't want to keep forward-compatible for native bridge.

151:0-163:52
Mon May 04 10:15:55 2015 +0000
Author: Eric Lin <1051588@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 706d52b3_7616cefc
Bytes: 76
So, for signals other than SIGSEGV, native bridge can still use sigaction()?

151:0-163:52
Mon May 04 15:03:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 706d52b3_7616cefc
UUID: f06142bc_74688120
Bytes: 196
The question is are there other important ones? If so, please describe a range that you think covers acceptable use cases.

I thought only SIGSEGV would be important. Everything else, not so much.

151:0-163:52
Tue May 05 02:36:11 2015 +0000
Author: Eric Lin <1051588@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f06142bc_74688120
UUID: 706d52b3_b9bdb7fb
Bytes: 446
I mean: Native bridge registers signal handler on behalf of apps code  native bridge is OK to use sigaction? 

A further discussion, how should native bridge decide which signal to use sigaction, and which one not? Can it assumes ART only call getSignalHandler(SIGSEGV), thus sigaction() all other signal handlers? (to prevent future ART changes from breaking it, native bridge can return NULL on getSignalHandler for signals other then SIGSEGV).

151:0-163:52
Tue May 05 03:30:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 706d52b3_b9bdb7fb
UUID: b0218a87_28396352
Bytes: 869
This is not intended to forbid the use of sigaction.

This API is for the cases when a native bridge would like the runtime to ensure that its handler is always first (after ART). If you are interested in other signals, and they don't have an ordering constraint like SIGSEGV, this isn't gonna force you to do it this way (libsigchain still accepts general sigaction...).

My original question was whether only SIGSEGV is enough. After talking with bdc, we'll likely remove the SIGSEGV restriction, and ART will just query the whole range supported by libsigchain (where this prioritization will be implemented). If you don't want it handled, simply return null for those signals and call sigaction yourself. Same goes for any additional handlers you want installed - just call sigaction normally, and they'll be in the normal chain.

Does this sound reasonable to you?

151:0-163:52
Tue May 05 05:30:24 2015 +0000
Author: Eric Lin <1051588@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0218a87_28396352
UUID: 504a0e43_f90ac8a6
Bytes: 25
Yes, sounds good. thanks.

File: libnativebridge/native_bridge.cc

141:41-141:42
Tue May 05 15:52:11 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 304d9a5a_372380d5
Bytes: 87
This is rather cryptic imo. How about comparing with a kMinSupported and kMaxSupported?

141:41-141:42
Tue May 05 15:59:27 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 304d9a5a_372380d5
UUID: 102df676_a381f1fe
Bytes: 646
My hope was to design something forward-compatible, so that it's easy to backport a bridge to older Android versions. So I didn't want kMaxSupported anymore. 1 is cryptic, agreed. It's just the minimal value (so 0 shows some failure).

As the bridge is working already, I feel we have all things that are needed for basic operation, so it should be fine. One thing that is probably missing is to report *our* version to the bridge (so that, e.g., a v3 bridge could either fail to initialize or adapt itself to being run as a v2).

Eric, could you weigh in here? Would another symbol in v2 bridges to communicate the libnativebridge version be OK?

141:41-141:42
Tue May 05 16:08:53 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 102df676_a381f1fe
UUID: 304d9a5a_5752c439
Bytes: 87
I'm good with not having using kMaxSupported but we should document the intention here.

141:41-141:42
Wed May 06 03:55:56 2015 +0000
Author: Jinghui Gu <1051763@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 102df676_a381f1fe
UUID: 4d36f5df_725578a6
Bytes: 219
Hi Andreas,
It's not necessary to keep forward-compatible for native bridge.
We need a clear interface for different version of native bridge.
If the version is not matched, then, libnativebridge should stop loading it.

495:30-495:31
Tue May 05 15:52:11 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 105416e3_d6d95472
Bytes: 93
nit: I'd prefer to use symbolic constants here and above even if it might look a bit useless.

495:30-495:31
Tue May 05 15:59:27 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 105416e3_d6d95472
UUID: b0218a87_0b04a1ce
Bytes: 7
Agreed.

File: libnativebridge/tests/NativeBridgeVersion_test.cpp

2:17-2:21
Tue May 05 15:52:11 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 105416e3_56ee4404
Bytes: 4
2015

