Revision: a8c3a9131d059c0800944815978e436304e2821a
Patch-set: 1
File: base/include/android-base/properties.h

21:12-21:18
Thu Sep 22 00:00:19 2016 +0000
Author: Josh Gao <1079148@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 300b1fab_676c1200
Bytes: 179
Given the recent __ANDROID__ vs __BIONIC__ cleanups, this error doesn't match the ifdef. It seems like we'll want at least a stub system properties implementation for host bionic?

21:12-21:18
Thu Sep 22 00:11:26 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 300b1fab_676c1200
UUID: 300b1fab_471b4e8a
Bytes: 72
duh, meant to say __BIONIC__. going to be a hard habit to get out of ...

29
Thu Sep 22 16:54:07 2016 +0000
Author: Felipe Leme <1013984@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 300b1fab_1b2b6bef
Bytes: 314
I know these commands are kind of obvious, but I would document them.

For exmaple, looking at both, my first doubt was does SetProperty returns a boolean and GetProperty doesn't? It would be nice it does (so I know whether the property exist or not), but I guess that's not possible due to how it's implemented...

29
Thu Sep 22 16:57:07 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 300b1fab_1b2b6bef
UUID: 300b1fab_5b0a0381
Bytes: 537
try the latest patchset :-)

the trouble with system properties is that nothing is obvious --- i actually didn't document these because i didn't want to get bogged down explaining all the weird nonsense. i'm very tempted to just make SetProperty void too and admit that, honestly, there's no good way to know whether your attempt to set actually succeeded. (but it's not _completely_ useless because we will return false if your key or value are too long, for example: it's all the more subtle failures that will be reported as success.)

29:0-29:5
Thu Sep 22 16:57:55 2016 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0272349_b43fc0e2
Bytes: 134
should this be bool too ? is there a distinction between the key being too long (is that a thing ?) and the property not being found ?

29:0-29:5
Thu Sep 22 17:04:54 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0272349_b43fc0e2
UUID: 300b1fab_bbc57f04
Bytes: 1079
there hasn't historically been such a distinction, and i couldn't think of a case where we'd need one.

the big question here does seem to be "should we distinguish 'not found' from 'empty'", and my provisional answer there is similar (for the reason outlined on an earlier comment to jmgao: you can't delete system properties, so there isn't much of a useful distinction between 'not found' and 'empty' anyway). if anyone has examples where it would have been useful to distinguish, let me know.

(we can also easily go from void -> bool later; return types aren't part of the mangled name.)

personally i'm actually more tempted to make SetProperty void... if you look at https://cs.corp.google.com/android/external/toybox/toys/android/setprop.c?type=cs&q=file:setprop.c&sq=package:%5Eandroid$&l=3 you'll see that a caller that cares really ends up duplicating most of the init logic anyway.

new reviewers: note that this is not the current patchset. please look at the current one (https://android-review.googlesource.com/#/c/277377/3/base/include/android-base/properties.h).

29:0-29:5
Thu Sep 22 17:13:16 2016 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 300b1fab_bbc57f04
UUID: d0272349_9433a419
Bytes: 147
I only asked because IIRC, keys have a size limit too. I was under the impression that callers would want to abort on bad keys. Maybe nobody cares.

29:0-29:5
Thu Sep 22 17:52:10 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0272349_9433a419
UUID: 9035ab64_85b7e4d1
Bytes: 867
but there are other limitations on keys too (valid characters, prefixes, ...) and those change.

i didn't use the result of the C API in /system/bin/getprop (https://cs.corp.google.com/android/external/toybox/toys/android/getprop.c?q=file:getprop.c&sq=package:%5Eandroid$&l=2) because it doesn't tell you anything useful. if you look at __system_property_get, it can't fail. even if the key is missing it returns 0 / fills in the empty string.

from what i can see of existing callers, they mainly use the return value because it's the length. but s.length()/s.empty() replace that.

we've seen tons of complaints about system properties over the years, but afaik, no one's ever complained about 'get' never failing and not distinguishing between 'empty' and 'missing'. (because, i think, you can't _remove_ a system property. so it just doesn't come up in practice.)

File: base/properties.cpp

27
Thu Sep 22 00:00:19 2016 +0000
Author: Josh Gao <1079148@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 300b1fab_47690eee
Bytes: 171
But we don't pass that on to the caller?

Properties with an empty value can exist, right? If so, should this return a bool instead, denoting whether a property was found?

27
Thu Sep 22 00:11:26 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 300b1fab_47690eee
UUID: 300b1fab_a70c4a4e
Bytes: 391
as you can see, i was a bit confused on that point myself. yes, they can. but the existing APIs (other than doing what you see here) don't let you tell the difference. i'm not sure whether that difference is useful: setting a default seems to be the actual usual intent.

i think just replacing this comment with something like "if unset, leave `value` so it can serve as a default" is fine.

27
Thu Sep 22 00:30:03 2016 +0000
Author: Josh Gao <1079148@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 300b1fab_a70c4a4e
UUID: 300b1fab_276dfac1
Bytes: 186
The following seems a bit surprising, though:

    SetProperty("foo", "");
    std::string bar = "bar";
    GetProperty("foo", &bar);

Also, the comment should probably go in the header.

27
Thu Sep 22 01:38:25 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 300b1fab_276dfac1
UUID: 300b1fab_c7a73ebf
Bytes: 419
what seems surprising? it's perhaps not how i'd have designed system properties myself, but then i think i'd have done just about *everything* differently. but this seems consistent with how they've always worked to me.

if we find a caller who'd use the bool we can always change later. but i don't think anyone's ever needed it yet. (not least because you can't delete a property. so 'empty' is a fairly usual state.)

