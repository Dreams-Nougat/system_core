Revision: 5c3ceed80e76b664535dec98b612c281a0b28df7
Patch-set: 1
File: libziparchive/zip_archive.cc

988
Thu Mar 12 17:10:55 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a19cdad8_cdfd69ec
Bytes: 16
aka std::vector?

988
Thu Mar 12 17:12:48 2015 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a19cdad8_cdfd69ec
UUID: 01d1268c_a840db65
Bytes: 102
I do not know... they are fixed size buffers we pass to zlib... vector does not seem appropriate here.

988
Thu Mar 12 18:42:46 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 01d1268c_a840db65
UUID: e18892a6_5fb80b58
Bytes: 429
i think you're thinking about vector wrong. a vector is a dynamically-allocated contiguous sequence. that's exactly what you have here. that it has additional functionality you don't need... well, so does unique_ptr. that's not a problem.

the way i see it, preferring vector in cases like this is just part of "avoid new/delete". (plus there's the added bonus -- see below -- that vector is more container-like than unique_ptr.)

988
Thu Mar 12 18:44:30 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e18892a6_5fb80b58
UUID: 81c436d3_279d34ae
Bytes: 147
(actually, the "added bonus" isn't true. the unique_ptr for T[] has an operator[], so you can still use the container syntax even with unique_ptr.)

1001
Thu Mar 12 17:10:55 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e1d33294_e7de8253
Bytes: 6
&x[0]?

1001
Thu Mar 12 17:12:48 2015 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e1d33294_e7de8253
UUID: 01d1268c_e83ad3eb
Bytes: 11
see above..

