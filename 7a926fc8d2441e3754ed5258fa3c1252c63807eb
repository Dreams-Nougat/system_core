Revision: 7a926fc8d2441e3754ed5258fa3c1252c63807eb
Patch-set: 1
File: adb/usb_linux.cpp

147
Thu Jul 23 23:26:57 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8df6329c_6b15c1cd
Bytes: 108
`s + s` here, but StringPrintf above for bus_name. Don't really care which, but might as well be consistent.

147
Fri Jul 24 00:32:37 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8df6329c_6b15c1cd
UUID: cd158a84_8b0bd12d
Bytes: 4
Done

318:4-318:18
Thu Jul 23 23:05:22 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed1a4eb3_c63ca24c
Bytes: 248
So if a timeout occurs, the URB is still active/pending, we'll return from this function, the buffer becomes stale, and random data could be written to the device? I'm guessing that the OS does buffering so this doesn't actually happen in practice?

318:4-318:18
Fri Jul 24 00:32:37 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed1a4eb3_c63ca24c
UUID: ad14d688_8a18efac
Bytes: 141
it should be copied already. the bit i'm not sure about is whether it was really intended that this code should loop forever (as it used to).

323:12-323:52
Thu Jul 23 23:05:22 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad14d688_e4a39af6
Bytes: 114
The old code broke out of the loop if h->urb_out_busy==0 && urb->status != 0. Was that just a bug in the old code?

323:12-323:52
Fri Jul 24 00:32:37 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ad14d688_e4a39af6
UUID: 8df6329c_ce86839b
Bytes: 27
that was my mistake. fixed.

530
Thu Jul 23 23:26:57 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdecaad0_6d879565
Bytes: 19
Make a constructor?

530
Fri Jul 24 00:32:37 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdecaad0_6d879565
UUID: 2d21c6e2_6bd49d32
Bytes: 4
Done

547:23-547:24
Thu Jul 23 23:26:57 2015 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: adfbf684_6fd30d03
Bytes: 15
Missed a space.

547:23-547:24
Fri Jul 24 00:32:37 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: adfbf684_6fd30d03
UUID: 0d2402f2_4d8bad28
Bytes: 4
Done

552:12-552:31
Thu Jul 23 23:05:22 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad14d688_67d4cc32
Bytes: 45
Doesn't the destructor already close this fd?

552:12-552:31
Fri Jul 24 00:32:37 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ad14d688_67d4cc32
UUID: 2d21c6e2_0bdfe151
Bytes: 4
Done

