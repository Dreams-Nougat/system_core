/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <crypto_utils/android_pubkey.h>

#include <string.h>

#include <memory>

#include <openssl/obj_mac.h>
#include <openssl/rsa.h>

#include <gtest/gtest.h>

// Test digest to verify.
const uint8_t kDigest[] = {
    0x31, 0x5f, 0x5b, 0xdb, 0x76, 0xd0, 0x78, 0xc4, 0x3b, 0x8a, 0xc0,
    0x06, 0x4e, 0x4a, 0x01, 0x64, 0x61, 0x2b, 0x1f, 0xce, 0x77, 0xc8,
    0x69, 0x34, 0x5b, 0xfc, 0x94, 0xc7, 0x58, 0x94, 0xed, 0xd3,
};

// 1024 bit RSA test key.
const uint8_t kKey1024[ANDROID_PUBKEY_ENCODED_SIZE(1024)] = {
    0x20, 0x00, 0x00, 0x00, 0x01, 0x89, 0x8b, 0x5a, 0xff, 0x88, 0x3a, 0xa4,
    0x05, 0xbb, 0xad, 0x95, 0xb4, 0x39, 0x85, 0x82, 0x37, 0x0d, 0x5f, 0xaa,
    0x1c, 0x8d, 0xf8, 0xac, 0x34, 0xd3, 0x8b, 0x17, 0xf6, 0x43, 0x78, 0x17,
    0xbd, 0xd9, 0xed, 0x9e, 0xf0, 0xaf, 0xfd, 0xd7, 0xea, 0x60, 0x9c, 0x2e,
    0xea, 0x87, 0xf1, 0xa2, 0xa9, 0x1e, 0xde, 0x93, 0x33, 0x3b, 0x5c, 0x71,
    0x60, 0xff, 0xd1, 0xf5, 0x7c, 0x88, 0xc8, 0xf6, 0x5e, 0x42, 0xae, 0x5a,
    0xda, 0x22, 0x57, 0x2a, 0x2c, 0x5d, 0x9a, 0xcc, 0x2f, 0x92, 0x1b, 0x3d,
    0x15, 0x83, 0x0e, 0x97, 0xb7, 0xdf, 0x92, 0xc9, 0xba, 0x02, 0x25, 0xe8,
    0x7c, 0x0c, 0x5f, 0xde, 0x79, 0x19, 0x40, 0x99, 0x71, 0xf9, 0xd2, 0x0a,
    0xb9, 0x9c, 0xac, 0xd3, 0xa3, 0xeb, 0x05, 0x11, 0xb5, 0x32, 0xda, 0x84,
    0x65, 0x25, 0x6e, 0x79, 0xe7, 0xfc, 0x92, 0xa5, 0x4e, 0x1f, 0x87, 0x59,
    0x10, 0x16, 0xb2, 0xd6, 0xad, 0x94, 0x8d, 0xb8, 0xa7, 0x1a, 0x64, 0x64,
    0xf2, 0x22, 0xfc, 0xa9, 0xb1, 0x63, 0xdf, 0xdb, 0x4d, 0xdd, 0xfb, 0x01,
    0x84, 0x08, 0x27, 0xb9, 0x50, 0x67, 0xfd, 0x0c, 0x1d, 0xc7, 0x78, 0x9c,
    0x0f, 0xe4, 0xf8, 0x9c, 0xc3, 0xb0, 0xec, 0x29, 0xf1, 0x09, 0xa6, 0x45,
    0x9c, 0x30, 0x35, 0x00, 0x7b, 0x9c, 0x45, 0x0a, 0x5e, 0x42, 0x81, 0x49,
    0xca, 0x01, 0xb6, 0xd6, 0x1d, 0x9b, 0xdf, 0x8b, 0x38, 0x04, 0x69, 0xd0,
    0x01, 0xa6, 0x5f, 0x66, 0x11, 0x86, 0xc0, 0x95, 0x3b, 0x3d, 0x32, 0x1d,
    0x05, 0x3a, 0xcb, 0x0e, 0x9b, 0x98, 0x8f, 0x86, 0x09, 0x39, 0x7b, 0x2b,
    0x10, 0xba, 0x4d, 0x3c, 0xcb, 0xb6, 0xf8, 0x35, 0x22, 0xf5, 0xfc, 0x14,
    0x7d, 0xbe, 0x2a, 0x43, 0xdc, 0x25, 0xbc, 0xcf, 0xe6, 0x86, 0x33, 0x66,
    0x96, 0x5d, 0x67, 0x60, 0x9a, 0x66, 0x54, 0x43, 0x12, 0x96, 0xbd, 0xbd,
    0x01, 0x00, 0x01, 0x00,
};

// 1024 bit RSA signature.
const uint8_t kSignature1024[ANDROID_PUBKEY_MODULUS_SIZE(1024)] = {
    0x2d, 0x21, 0x55, 0xf2, 0x5c, 0x3f, 0x35, 0x4c, 0x42, 0x53, 0xf2, 0x4b,
    0xd6, 0x50, 0x44, 0x44, 0xbc, 0x0d, 0x64, 0x44, 0x8c, 0x66, 0xb4, 0x1c,
    0x32, 0xd6, 0xf5, 0x26, 0x64, 0xf2, 0x80, 0x5d, 0xea, 0xda, 0x70, 0x70,
    0xfe, 0xbe, 0x52, 0x51, 0x4d, 0x7c, 0x86, 0x1b, 0x29, 0x80, 0xf8, 0x3d,
    0x21, 0x61, 0x09, 0x47, 0x0f, 0xc8, 0x50, 0x68, 0x40, 0x98, 0x11, 0xa5,
    0xbd, 0x04, 0x3a, 0xd5, 0x01, 0xc7, 0x4b, 0xc0, 0xe5, 0xad, 0xfd, 0xea,
    0x95, 0xab, 0xa4, 0xd4, 0x14, 0x63, 0x87, 0x34, 0x93, 0x7f, 0x3f, 0x8e,
    0x90, 0x63, 0x79, 0x6d, 0xfb, 0x9b, 0xc5, 0x15, 0x87, 0x29, 0x66, 0x21,
    0x53, 0x6c, 0x1a, 0xa3, 0x06, 0x82, 0xf8, 0x06, 0x08, 0x3a, 0x7d, 0x7e,
    0x7c, 0xcc, 0xbb, 0x4d, 0xa2, 0x1c, 0xfa, 0xb5, 0x93, 0xb4, 0x31, 0xb5,
    0xf5, 0x1b, 0xb6, 0xf6, 0xef, 0x1f, 0x61, 0x3a,
};

// 2048 RSA test key.
const uint8_t kKey2048[ANDROID_PUBKEY_ENCODED_SIZE(2048)] = {
    0x40, 0x00, 0x00, 0x00, 0x05, 0x75, 0x61, 0xd1, 0x33, 0xf0, 0x2d, 0x12,
    0x45, 0xfb, 0xae, 0x07, 0x02, 0x15, 0x4f, 0x3a, 0x2b, 0xa3, 0xbc, 0x49,
    0xbd, 0x14, 0x07, 0xa0, 0xc0, 0x9f, 0x0c, 0x52, 0x60, 0x77, 0x9f, 0xa2,
    0x31, 0xd0, 0xa7, 0xfb, 0x7e, 0xde, 0xfb, 0xc9, 0x05, 0xc0, 0x97, 0xf7,
    0x74, 0x99, 0xe6, 0xd1, 0x08, 0xa6, 0xc2, 0x59, 0x5a, 0xd8, 0x37, 0x1d,
    0xe0, 0x48, 0x5e, 0x63, 0x44, 0x04, 0x8b, 0x05, 0x20, 0xf6, 0x25, 0x67,
    0x38, 0xb2, 0xb6, 0xf9, 0xbe, 0xb6, 0x1d, 0x7f, 0x1b, 0x71, 0x8a, 0xeb,
    0xb7, 0xf8, 0x01, 0xc1, 0x5e, 0xf7, 0xfe, 0x48, 0x08, 0x27, 0x0f, 0x27,
    0x2a, 0x64, 0x1a, 0x43, 0x8d, 0xcf, 0x5a, 0x33, 0x5c, 0x18, 0xc5, 0xf4,
    0xe7, 0xfe, 0xee, 0xd3, 0x12, 0x62, 0xad, 0x61, 0x78, 0x9a, 0x03, 0xb0,
    0xaf, 0xab, 0x91, 0x57, 0x46, 0xbf, 0x18, 0xc6, 0xbc, 0x0c, 0x6b, 0x55,
    0xcd, 0xda, 0xc4, 0xcc, 0x98, 0x46, 0x91, 0x99, 0xbc, 0xa3, 0xca, 0x6c,
    0x86, 0xa6, 0x1c, 0x8f, 0xca, 0xf8, 0xf6, 0x8a, 0x00, 0x8e, 0x05, 0xd7,
    0x13, 0x43, 0xe2, 0xf2, 0x1a, 0x13, 0xf3, 0x50, 0x13, 0xa4, 0xf2, 0x4e,
    0x41, 0xb1, 0x36, 0x78, 0x55, 0x4c, 0x5e, 0x27, 0xc5, 0xc0, 0x4b, 0xd8,
    0x93, 0xaa, 0x7e, 0xf0, 0x90, 0x08, 0x10, 0x26, 0x72, 0x6d, 0xb9, 0x21,
    0xae, 0x4d, 0x01, 0x4b, 0x55, 0x1d, 0xe7, 0x1e, 0x5e, 0x31, 0x6e, 0x62,
    0xd1, 0x33, 0x26, 0xcb, 0xdb, 0xfe, 0x72, 0x98, 0xc8, 0x06, 0x1c, 0x12,
    0xdf, 0xfc, 0x74, 0xe5, 0x7a, 0x6f, 0xf5, 0xa3, 0x63, 0x08, 0xe3, 0x02,
    0x68, 0x4d, 0x7c, 0x70, 0x05, 0xec, 0x95, 0x7e, 0x24, 0xa4, 0xbc, 0x4c,
    0xcd, 0x39, 0x14, 0xb5, 0x2a, 0x8f, 0xc1, 0xe3, 0x4e, 0xfa, 0xf8, 0x70,
    0x50, 0x8f, 0xd5, 0x8e, 0xc7, 0xb5, 0x32, 0x89, 0x4d, 0xbb, 0x6a, 0xc1,
    0xc1, 0xa2, 0x42, 0x57, 0x57, 0xbd, 0x2a, 0xdc, 0xa6, 0xfd, 0xc8, 0x86,
    0x44, 0x6a, 0x03, 0x5d, 0x4d, 0x28, 0xe1, 0xde, 0xb4, 0xa9, 0xa5, 0x03,
    0x61, 0x7a, 0x5f, 0xb1, 0x09, 0x17, 0x2b, 0x9c, 0xa2, 0x54, 0x28, 0xad,
    0x34, 0xc9, 0x5f, 0x6c, 0x9f, 0xb8, 0xd2, 0xa9, 0x78, 0xa7, 0xaa, 0xb3,
    0x11, 0x2f, 0x65, 0x9b, 0x4e, 0x67, 0x0c, 0xcc, 0x20, 0x36, 0xbf, 0x26,
    0x2b, 0x4e, 0xc0, 0xd4, 0xbd, 0x22, 0x64, 0xc4, 0x1c, 0x56, 0x69, 0xdb,
    0x5f, 0x89, 0xe1, 0x75, 0x68, 0x8d, 0x0e, 0xab, 0x1c, 0x10, 0x1a, 0xc0,
    0x12, 0x5d, 0x6f, 0xbd, 0x09, 0xbb, 0x47, 0xcb, 0xe7, 0x34, 0xef, 0x56,
    0xab, 0xea, 0xc3, 0xe9, 0x7f, 0x9a, 0x3d, 0xe9, 0x2d, 0x14, 0x61, 0x25,
    0x37, 0x5c, 0x3b, 0x4b, 0xaf, 0x5a, 0x4b, 0xc8, 0x99, 0x1a, 0x32, 0x8f,
    0x54, 0x07, 0xd3, 0x57, 0x8a, 0x3d, 0x2a, 0xf7, 0x9e, 0x7e, 0x92, 0x2a,
    0x50, 0xe9, 0xd8, 0xdb, 0xd6, 0x03, 0xd3, 0x8e, 0x54, 0x32, 0xce, 0x87,
    0x93, 0x92, 0xe7, 0x75, 0xe1, 0x6b, 0x78, 0x1a, 0x85, 0xc2, 0x46, 0xa1,
    0x31, 0xbb, 0xc7, 0xb9, 0x1d, 0xd1, 0x71, 0xe0, 0xe2, 0x9b, 0x9c, 0x0d,
    0xa3, 0xcf, 0x93, 0x4d, 0x87, 0x7b, 0x65, 0xd9, 0xda, 0x4c, 0xd9, 0x6a,
    0xa6, 0x36, 0xc2, 0xc7, 0xe3, 0x33, 0xe2, 0xc3, 0x83, 0xd1, 0x72, 0x54,
    0x30, 0x81, 0x5e, 0x34, 0x2c, 0x61, 0xee, 0xf4, 0x48, 0x97, 0xb6, 0xaa,
    0x47, 0x6a, 0x05, 0x09, 0xd8, 0x4d, 0x90, 0xaf, 0xa8, 0x4e, 0x82, 0xe4,
    0x8e, 0xb5, 0xe2, 0x65, 0x86, 0x67, 0xe9, 0x5b, 0x4b, 0x9a, 0x68, 0x08,
    0x30, 0xf6, 0x25, 0x8b, 0x20, 0xda, 0x26, 0x6f, 0xbd, 0x0d, 0xa5, 0xd8,
    0x6a, 0x7b, 0x01, 0x2f, 0xab, 0x7b, 0xb5, 0xfe, 0x62, 0x37, 0x2d, 0x94,
    0x43, 0x2f, 0x4d, 0x16, 0x01, 0x00, 0x01, 0x00,
};

// 2048 bit RSA signature.
const uint8_t kSignature2048[ANDROID_PUBKEY_MODULUS_SIZE(2048)] = {
    0x3a, 0x11, 0x84, 0x40, 0xc1, 0x2f, 0x13, 0x8c, 0xde, 0xb0, 0xc3, 0x89,
    0x8a, 0x63, 0xb2, 0x50, 0x93, 0x58, 0xc0, 0x0c, 0xb7, 0x08, 0xe7, 0x6c,
    0x52, 0x87, 0x4e, 0x78, 0x89, 0xa3, 0x9a, 0x47, 0xeb, 0x11, 0x57, 0xbc,
    0xb3, 0x97, 0xf8, 0x34, 0xf1, 0xf7, 0xbf, 0x3a, 0xfa, 0x1c, 0x6b, 0xdc,
    0xd1, 0x02, 0xde, 0x9a, 0x0d, 0x72, 0xe7, 0x19, 0x63, 0x81, 0x46, 0x68,
    0x1e, 0x63, 0x64, 0xc6, 0x59, 0xe7, 0x7c, 0x39, 0xed, 0x32, 0xd2, 0xd1,
    0xd5, 0x1f, 0x13, 0x9b, 0x52, 0xdf, 0x34, 0xa3, 0xc0, 0xc4, 0x9a, 0x63,
    0x9b, 0x9c, 0xbe, 0x22, 0xc8, 0xd8, 0x14, 0x2f, 0x4c, 0x78, 0x36, 0xdb,
    0x16, 0x41, 0x67, 0xc1, 0x21, 0x8a, 0x73, 0xb2, 0xe5, 0xb0, 0xd3, 0x80,
    0x91, 0x7a, 0xbf, 0xf9, 0x59, 0x4a, 0x4d, 0x78, 0x45, 0x44, 0xa1, 0x52,
    0x86, 0x29, 0x48, 0x4d, 0xf0, 0x5d, 0xf2, 0x55, 0xa7, 0xcd, 0xc5, 0x2b,
    0x7b, 0xe0, 0xb1, 0xf6, 0x2a, 0xd5, 0x61, 0xba, 0x1e, 0x1e, 0x3a, 0xf0,
    0x55, 0xbc, 0x8c, 0x44, 0x41, 0xfc, 0xb8, 0x8c, 0x76, 0xbf, 0x80, 0x58,
    0x82, 0x35, 0x4b, 0x0c, 0xfd, 0xef, 0xd5, 0x70, 0xd1, 0x64, 0xcb, 0x46,
    0x58, 0x37, 0xbc, 0xa9, 0x7d, 0xd4, 0x70, 0xac, 0xce, 0xec, 0xca, 0x48,
    0xcb, 0x0a, 0x40, 0x77, 0x04, 0x59, 0xca, 0x9c, 0x7d, 0x1a, 0x0b, 0xf0,
    0xb5, 0xdd, 0xde, 0x71, 0x18, 0xb8, 0xef, 0x90, 0x2a, 0x09, 0x42, 0x39,
    0x74, 0xff, 0x45, 0xa1, 0x39, 0x17, 0x50, 0x89, 0xa6, 0x5f, 0xbc, 0x9c,
    0x0c, 0x9b, 0x47, 0x25, 0x79, 0x3e, 0xe3, 0xaa, 0xaf, 0xbe, 0x73, 0x6b,
    0xcb, 0xe7, 0x35, 0xc1, 0x27, 0x09, 0xcd, 0xeb, 0xd7, 0xcf, 0x63, 0x83,
    0x64, 0x8c, 0x45, 0x1c, 0x1d, 0x58, 0xcc, 0xd2, 0xf8, 0x2b, 0x4c, 0x4e,
    0x14, 0x89, 0x2d, 0x70,
};

// 4096 bit RSA test key.
const uint8_t kKey4096[ANDROID_PUBKEY_ENCODED_SIZE(4096)] = {
    0x80, 0x00, 0x00, 0x00, 0xf7, 0x05, 0xff, 0xbe, 0x39, 0xb4, 0xaa, 0xa5,
    0xcb, 0x8f, 0xe7, 0x96, 0xdd, 0x0a, 0x63, 0xd5, 0x62, 0x36, 0x01, 0xa4,
    0x49, 0x61, 0x7e, 0x3b, 0x62, 0xd7, 0x53, 0x0e, 0x23, 0xa5, 0xe1, 0x12,
    0x18, 0x10, 0x6c, 0xa4, 0x28, 0x33, 0xda, 0x76, 0x83, 0x09, 0x33, 0xa5,
    0x5f, 0x32, 0x04, 0x5a, 0x01, 0x52, 0x47, 0x85, 0xa4, 0x4b, 0x29, 0x62,
    0xf4, 0x3e, 0xb2, 0x06, 0xd6, 0xdd, 0x46, 0x60, 0x0d, 0xff, 0x59, 0x8f,
    0xd5, 0xcf, 0x14, 0xe2, 0x82, 0xc6, 0x3f, 0x22, 0x61, 0xe5, 0x02, 0x97,
    0x74, 0x62, 0xf8, 0x66, 0x1c, 0xd4, 0xdc, 0xd1, 0xe7, 0x46, 0x95, 0x09,
    0xd1, 0x75, 0x6d, 0x73, 0xbf, 0x4f, 0xe8, 0xd9, 0x71, 0xf5, 0x9a, 0xe0,
    0x21, 0x78, 0xdf, 0x82, 0x1d, 0x0c, 0x44, 0x5d, 0x5c, 0x2f, 0x80, 0x30,
    0x55, 0xf7, 0x3a, 0x0e, 0xa4, 0x1e, 0xb5, 0x91, 0x80, 0x0b, 0x06, 0x1c,
    0x0a, 0x45, 0x95, 0xf9, 0xa8, 0x7e, 0x4f, 0x4b, 0x52, 0x23, 0x44, 0x65,
    0x94, 0xf3, 0x8f, 0x2c, 0x81, 0x65, 0x18, 0x01, 0x2a, 0xdc, 0x65, 0x0a,
    0x53, 0xdc, 0x79, 0x5f, 0x48, 0x42, 0xca, 0x8b, 0xcb, 0x52, 0x3a, 0xbc,
    0x13, 0x85, 0xc7, 0x3e, 0x06, 0xbc, 0x3f, 0xa6, 0xf0, 0x48, 0xac, 0x37,
    0x00, 0xfa, 0x1f, 0xa2, 0x68, 0x35, 0x64, 0x38, 0x81, 0xa8, 0x79, 0x6d,
    0xa1, 0x84, 0x05, 0x52, 0x62, 0xc1, 0xda, 0x0b, 0x0d, 0x3c, 0xc9, 0x99,
    0x34, 0xcb, 0x71, 0x7f, 0x1a, 0x7a, 0x73, 0x54, 0xb6, 0x77, 0xda, 0x79,
    0x2e, 0xb0, 0xf1, 0xe9, 0x60, 0xc1, 0x0e, 0x2e, 0xb8, 0xa4, 0x32, 0x49,
    0x68, 0x38, 0x76, 0x95, 0x1a, 0x41, 0xaf, 0x15, 0xcd, 0x47, 0x9f, 0x86,
    0x70, 0x71, 0x9b, 0x9c, 0x7d, 0xcb, 0x2f, 0x47, 0x0a, 0xea, 0x6f, 0x5c,
    0xa2, 0xe2, 0xb6, 0x5b, 0xa3, 0xf1, 0x2d, 0x23, 0xec, 0xf4, 0x51, 0xe9,
    0x31, 0x9f, 0xb9, 0xad, 0x9d, 0xe8, 0x2d, 0x84, 0x4c, 0x65, 0x70, 0xd5,
    0x23, 0xb0, 0xb6, 0xba, 0x3a, 0xb0, 0x24, 0x12, 0xcd, 0x36, 0x58, 0x10,
    0x07, 0xaf, 0x3e, 0x5c, 0x79, 0x79, 0x0d, 0x0d, 0xdd, 0x72, 0xe7, 0x77,
    0x1a, 0xcf, 0x77, 0x67, 0xf6, 0xa8, 0xa8, 0x53, 0xe8, 0xde, 0xfc, 0x87,
    0x59, 0xd7, 0x06, 0xa3, 0x89, 0xbc, 0x00, 0x55, 0x2e, 0x2f, 0x65, 0x41,
    0x44, 0x7e, 0x95, 0x71, 0x53, 0x3c, 0x14, 0x8a, 0x12, 0xbf, 0x8d, 0x89,
    0xec, 0xd2, 0xde, 0x43, 0x90, 0x58, 0x82, 0xf0, 0x4c, 0x1c, 0x16, 0x0b,
    0xd7, 0xeb, 0x57, 0x90, 0x9a, 0x83, 0xfa, 0x2e, 0x44, 0xb7, 0x37, 0x3a,
    0x4d, 0xdc, 0x18, 0xa8, 0x4c, 0x7d, 0x22, 0xc2, 0x14, 0x27, 0x51, 0x33,
    0x86, 0xf5, 0x52, 0x4f, 0xe1, 0xfd, 0xb3, 0x52, 0xbc, 0x0a, 0x51, 0x53,
    0xd2, 0x95, 0x27, 0xdc, 0x18, 0x3e, 0x72, 0x53, 0x2a, 0x55, 0x1a, 0x6c,
    0xfa, 0xc8, 0x69, 0x0d, 0xff, 0x61, 0x77, 0xdf, 0x67, 0xf3, 0x54, 0xae,
    0x22, 0x7c, 0x62, 0xde, 0x9b, 0xe4, 0x85, 0xf2, 0x1a, 0x43, 0x3d, 0x61,
    0x9f, 0x30, 0xc9, 0x4a, 0x63, 0x9f, 0xea, 0xba, 0x65, 0x1d, 0x9b, 0x82,
    0x26, 0x7b, 0x1c, 0x5a, 0x78, 0xc7, 0xc6, 0xb6, 0x5a, 0x91, 0xab, 0x13,
    0x40, 0x4e, 0x1e, 0x00, 0x20, 0x6b, 0x42, 0xae, 0x05, 0x1d, 0x11, 0xd5,
    0xf5, 0x01, 0xde, 0xb5, 0x5f, 0xbb, 0xda, 0x48, 0x39, 0x11, 0x3d, 0x82,
    0x7d, 0xc4, 0xe2, 0x31, 0x1f, 0x70, 0x84, 0x4f, 0x93, 0xdc, 0x65, 0x23,
    0xa2, 0x09, 0x1c, 0xdb, 0x2d, 0x40, 0x41, 0x5c, 0x2d, 0xd5, 0x8e, 0xa4,
    0x61, 0x51, 0x86, 0xc2, 0xad, 0x15, 0x8c, 0x98, 0xa2, 0x2e, 0x8a, 0xe9,
    0x49, 0x1e, 0xc3, 0xd9, 0x70, 0x3f, 0xa5, 0x65, 0xa7, 0x13, 0xd6, 0x29,
    0xd0, 0xd3, 0xc2, 0xa4, 0x38, 0xa4, 0xfa, 0xc0, 0x31, 0x08, 0x25, 0xcd,
    0xf8, 0x03, 0x54, 0xfa, 0xb0, 0x24, 0x97, 0xe7, 0x58, 0xd6, 0x73, 0x4e,
    0x04, 0x9d, 0x57, 0x4b, 0x5e, 0x59, 0x4f, 0x7a, 0x32, 0x41, 0xad, 0x9a,
    0x2d, 0x1e, 0x2d, 0xf3, 0x3c, 0xc8, 0xa7, 0xe7, 0xa5, 0x1e, 0x7e, 0x17,
    0x7c, 0x07, 0xda, 0x2c, 0x73, 0x75, 0x7e, 0x92, 0x64, 0x67, 0x6c, 0x43,
    0xa9, 0x84, 0x9b, 0x80, 0x39, 0x8b, 0x4e, 0xe5, 0xb8, 0xe5, 0xe3, 0x25,
    0x35, 0xa6, 0xc2, 0x5c, 0x26, 0x41, 0xe8, 0x3c, 0xab, 0xbe, 0xed, 0x60,
    0xb0, 0xd1, 0x36, 0x6a, 0x44, 0xbf, 0x62, 0xc7, 0x8d, 0x36, 0xe2, 0x20,
    0x9c, 0xe0, 0x91, 0x29, 0x77, 0xcd, 0x68, 0x4f, 0x12, 0xa2, 0xa7, 0x1c,
    0x18, 0x0d, 0x2e, 0xe8, 0x55, 0xff, 0xf8, 0xae, 0xfc, 0x90, 0x26, 0x45,
    0x7e, 0xab, 0xb3, 0x2f, 0xe0, 0x43, 0x32, 0xdb, 0xb7, 0x9f, 0x81, 0x19,
    0x3c, 0x40, 0x4f, 0x53, 0x5f, 0x6f, 0xfb, 0x43, 0xa0, 0x9c, 0x5e, 0x58,
    0x44, 0xfc, 0x56, 0x5e, 0xcf, 0x0a, 0x9b, 0x00, 0xef, 0x57, 0xd3, 0x13,
    0xaf, 0x34, 0xa2, 0xcd, 0xe5, 0x8f, 0x03, 0x9a, 0x65, 0x12, 0x93, 0x1b,
    0xfb, 0xa5, 0x3c, 0x62, 0x48, 0x8b, 0x4f, 0x61, 0xb9, 0xbc, 0x61, 0x68,
    0xbb, 0x28, 0xbf, 0x43, 0xfb, 0xdd, 0xd4, 0x94, 0xaf, 0x73, 0xc3, 0x97,
    0x23, 0x27, 0x76, 0x23, 0x27, 0x67, 0xff, 0x64, 0x4e, 0x9a, 0xdf, 0x0a,
    0x2d, 0xd3, 0xaa, 0x63, 0x98, 0xbe, 0x8d, 0x16, 0xbc, 0x36, 0x1b, 0xfa,
    0x9f, 0xef, 0xb8, 0x29, 0x86, 0x58, 0x2a, 0x09, 0xd7, 0x70, 0xc6, 0x73,
    0x23, 0xf7, 0x70, 0x64, 0x26, 0x1a, 0xf6, 0x18, 0x10, 0xc1, 0xa5, 0xf8,
    0xb1, 0x07, 0xea, 0x90, 0x44, 0xea, 0xe5, 0xab, 0x92, 0x24, 0x11, 0x6a,
    0x87, 0x7a, 0x11, 0xe9, 0xec, 0xbf, 0x1d, 0x7d, 0x75, 0xb5, 0x02, 0x8d,
    0x2a, 0xcf, 0x2b, 0x1f, 0xaa, 0xbd, 0x49, 0x1c, 0xcd, 0x37, 0x58, 0x63,
    0xc8, 0xf7, 0xc4, 0xd1, 0x21, 0x0f, 0xb7, 0x62, 0xa9, 0xbc, 0x1f, 0x6e,
    0x66, 0x65, 0x23, 0xa5, 0x39, 0x97, 0x5c, 0x5a, 0x3a, 0x12, 0xec, 0x34,
    0x04, 0x57, 0x86, 0xcf, 0xe0, 0x15, 0x63, 0xcd, 0xd8, 0xf1, 0xd4, 0x88,
    0xf0, 0x9a, 0xc4, 0x35, 0xc2, 0x62, 0x68, 0x09, 0xb2, 0x9e, 0x47, 0x7e,
    0xfc, 0x7e, 0x20, 0x9d, 0x9e, 0x80, 0xb9, 0x7f, 0x0b, 0x76, 0x17, 0xef,
    0xe2, 0xbb, 0x90, 0x82, 0x92, 0xf2, 0x6a, 0x46, 0x8f, 0x6a, 0x5f, 0xab,
    0x46, 0xb7, 0xef, 0xe1, 0xc8, 0x20, 0x1c, 0x9d, 0x43, 0x76, 0x69, 0x87,
    0xa1, 0x87, 0xe9, 0x28, 0x12, 0xa0, 0xd2, 0xef, 0xe2, 0x16, 0x3e, 0x64,
    0x43, 0x8c, 0x03, 0x59, 0x47, 0x9d, 0x04, 0x6b, 0x7c, 0xc6, 0x2e, 0x89,
    0x40, 0x5c, 0x6d, 0x08, 0x98, 0xda, 0x1d, 0xa0, 0x97, 0xe5, 0xa0, 0xa4,
    0x80, 0x0a, 0x19, 0xe5, 0x6a, 0xfb, 0x2f, 0xe6, 0x3e, 0x28, 0xdd, 0xa5,
    0x95, 0x8a, 0xe2, 0x69, 0xc0, 0x2d, 0x8e, 0x08, 0xa8, 0x9e, 0x4b, 0x4f,
    0x73, 0x80, 0x5f, 0x6e, 0xa9, 0xb1, 0x15, 0x47, 0x6c, 0x31, 0x97, 0xd5,
    0x5f, 0x56, 0x9f, 0x76, 0xb9, 0x70, 0x57, 0x0e, 0x52, 0xaa, 0x46, 0xf4,
    0x99, 0xbc, 0x6b, 0x60, 0x98, 0x91, 0x74, 0x45, 0x2c, 0x0b, 0x2f, 0xb9,
    0xa6, 0xac, 0x08, 0xba, 0x73, 0x30, 0x5c, 0x1e, 0x0a, 0x89, 0xab, 0x24,
    0x3d, 0x91, 0x27, 0xad, 0xa8, 0xb5, 0xe6, 0x8b, 0x57, 0xb7, 0xb1, 0x30,
    0xdb, 0xd5, 0x28, 0xb7, 0xf1, 0x73, 0xac, 0xe0, 0x9d, 0xfd, 0xef, 0x25,
    0x36, 0x85, 0x39, 0xb8, 0x3c, 0x1c, 0xc7, 0x12, 0xf9, 0xff, 0xa2, 0xa2,
    0x02, 0x6d, 0xd6, 0x13, 0xad, 0x03, 0x26, 0x67, 0xa3, 0xae, 0x62, 0x48,
    0x01, 0x00, 0x01, 0x00,
};

// 4096 bit RSA signature.
const uint8_t kSignature4096[ANDROID_PUBKEY_MODULUS_SIZE(4096)] = {
    0x97, 0x50, 0xeb, 0x9c, 0x5f, 0xfc, 0x21, 0xf5, 0x80, 0x38, 0x1c, 0xa5,
    0x54, 0x6b, 0x47, 0xee, 0x01, 0x8e, 0x0a, 0x41, 0x7a, 0x0a, 0x28, 0x20,
    0x94, 0x65, 0x1a, 0x0a, 0xa4, 0x86, 0xa9, 0x26, 0x85, 0xdd, 0x4e, 0xd8,
    0x55, 0xef, 0xfd, 0xf2, 0x76, 0x7c, 0x34, 0x30, 0x49, 0x64, 0x28, 0xa6,
    0xda, 0x6c, 0xbc, 0x9e, 0x6d, 0x62, 0x4e, 0xdb, 0xbe, 0x38, 0x35, 0x82,
    0x19, 0x48, 0xd3, 0x33, 0x38, 0xe1, 0x02, 0x1c, 0x57, 0x66, 0x02, 0xda,
    0xce, 0xc5, 0xed, 0xcc, 0x54, 0x98, 0x6c, 0x24, 0x75, 0x3c, 0x20, 0xf4,
    0x19, 0xb8, 0x0e, 0x50, 0xf8, 0x18, 0xc9, 0x45, 0x3e, 0xb3, 0x2b, 0xe1,
    0x87, 0x40, 0x77, 0xd5, 0x41, 0x41, 0x53, 0xbf, 0xc1, 0xaa, 0x9d, 0x2f,
    0xc0, 0xf3, 0x70, 0x52, 0x95, 0x7f, 0xff, 0x30, 0x4b, 0xf4, 0xee, 0x57,
    0x7d, 0x18, 0x26, 0xdf, 0x9d, 0x45, 0x4e, 0x0a, 0xb9, 0xbb, 0xef, 0x11,
    0xb6, 0xfd, 0xb4, 0x4e, 0x4a, 0x30, 0xbb, 0x7f, 0x59, 0x66, 0xc9, 0xb8,
    0x34, 0xa8, 0xd8, 0xfb, 0x80, 0x96, 0xe5, 0x8a, 0x66, 0xd2, 0xb0, 0x6c,
    0x22, 0xf3, 0x87, 0xd0, 0x4b, 0xc4, 0x5f, 0xd9, 0xd4, 0x9a, 0x31, 0x37,
    0x70, 0xf4, 0x75, 0xc1, 0x20, 0x6e, 0xf6, 0xbb, 0x6d, 0xac, 0xd8, 0x18,
    0x14, 0x60, 0xad, 0x0e, 0x26, 0x36, 0x35, 0x72, 0xd9, 0xe5, 0x01, 0x9e,
    0xa8, 0x10, 0x0e, 0xcb, 0x7c, 0x95, 0x0f, 0xf0, 0x1b, 0x7b, 0xcb, 0x77,
    0xba, 0x2e, 0xae, 0xaa, 0xbf, 0x40, 0x69, 0x6e, 0xe2, 0x1c, 0x4a, 0xbd,
    0xc9, 0x3f, 0x6c, 0x58, 0xd9, 0xef, 0xa2, 0x96, 0xe6, 0x10, 0x9a, 0xf6,
    0xf0, 0x31, 0x10, 0x95, 0x25, 0x55, 0x9b, 0x70, 0xd3, 0xf8, 0x9b, 0x60,
    0xc4, 0x53, 0x84, 0x17, 0xa6, 0x69, 0x84, 0xad, 0xd9, 0xfc, 0xfa, 0xfa,
    0x1f, 0xe1, 0x5c, 0xba, 0xf7, 0xf7, 0x47, 0x18, 0xaf, 0x5c, 0x31, 0x90,
    0x1e, 0x8a, 0x0d, 0x4a, 0xaf, 0x39, 0x81, 0xa2, 0x34, 0x1d, 0x7c, 0xa7,
    0xb7, 0xfa, 0x0a, 0x26, 0xa9, 0x76, 0xbd, 0xe7, 0xfc, 0xf4, 0x86, 0x85,
    0x52, 0xff, 0x39, 0x39, 0x7a, 0x58, 0x8e, 0x0f, 0xe6, 0xb1, 0x53, 0xcb,
    0x43, 0x8b, 0x4b, 0x4e, 0x46, 0x58, 0xa7, 0x9b, 0x2e, 0xe1, 0xf9, 0x79,
    0x20, 0x74, 0x86, 0x86, 0x95, 0x30, 0x61, 0x6a, 0xb9, 0x23, 0x7a, 0x76,
    0x5d, 0x59, 0xce, 0x32, 0x81, 0x7c, 0x92, 0x0b, 0x95, 0x7f, 0x2a, 0xa0,
    0xe8, 0xd5, 0x6f, 0x3d, 0xb7, 0xed, 0xf9, 0xb6, 0x61, 0xcf, 0x1e, 0xec,
    0xeb, 0x9f, 0xc1, 0x67, 0x4c, 0xdd, 0x5d, 0x38, 0x69, 0x55, 0x00, 0xdf,
    0x88, 0xfd, 0x87, 0x6e, 0xe5, 0x2f, 0xc8, 0x1a, 0x42, 0x5c, 0xd8, 0xb8,
    0xb3, 0x46, 0x06, 0xe1, 0x51, 0x8f, 0xda, 0xd4, 0xa3, 0xb4, 0x5f, 0x71,
    0xa3, 0xb9, 0x87, 0x95, 0xad, 0xc2, 0x71, 0x16, 0x09, 0x81, 0x4d, 0x18,
    0x7f, 0x77, 0xaf, 0xbc, 0x9f, 0x3d, 0xcb, 0xc1, 0x77, 0xa7, 0x35, 0x93,
    0xef, 0xc3, 0x05, 0x7c, 0xdd, 0xcd, 0x19, 0xb3, 0xb0, 0xec, 0x5e, 0xb8,
    0x7a, 0x7d, 0x2b, 0xe2, 0x5a, 0x6e, 0x96, 0x4a, 0x4d, 0xd4, 0x21, 0xc6,
    0xb2, 0xe7, 0x19, 0xbd, 0x15, 0x34, 0x92, 0xe0, 0xd1, 0xab, 0xbe, 0x6e,
    0x0e, 0x57, 0x24, 0x02, 0xbe, 0x1d, 0x28, 0x96, 0xe7, 0x28, 0xaf, 0x55,
    0xc7, 0xab, 0x5f, 0xa6, 0x6e, 0x7d, 0x88, 0x9e, 0xac, 0x46, 0x4b, 0x2a,
    0xba, 0xb0, 0x0b, 0xec, 0x04, 0x19, 0x67, 0x8a, 0xbc, 0x0a, 0x75, 0xc6,
    0xcd, 0x6d, 0xe4, 0xe2, 0x91, 0x46, 0xcf, 0x8f, 0xb4, 0x8a, 0x0c, 0x65,
    0x2e, 0xd6, 0x75, 0x2a, 0x4d, 0xdf, 0x55, 0x84, 0x72, 0x65, 0x90, 0xa0,
    0xf1, 0x7c, 0x14, 0xf8, 0xb2, 0xe9, 0x9a, 0x0f,
};

struct TestParam {
  const uint8_t* pubkey;
  size_t pubkey_size;
  const uint8_t* signature;
  size_t signature_size;
} kTestParams[] = {
    {kKey1024, sizeof(kKey1024), kSignature1024, sizeof(kSignature1024)},
    {kKey2048, sizeof(kKey2048), kSignature2048, sizeof(kSignature2048)},
    {kKey4096, sizeof(kKey4096), kSignature4096, sizeof(kSignature4096)},
};

template <size_t pubkey_size, size_t signature_size>
TestParam MakeTestParam(const uint8_t pubkey[pubkey_size],
                        const uint8_t signature[signature_size]) {
  return TestParam({pubkey, pubkey_size, signature, signature_size});
}

struct AndroidPubkeyTest : public ::testing::TestWithParam<TestParam> {
  AndroidPubkeyTest() : key_(nullptr, RSA_free) {}

  void SetUp() override {
    RSA* key = NULL;
    ASSERT_EQ(
        GetParam().pubkey_size,
        android_pubkey_decode(GetParam().pubkey, GetParam().pubkey_size, &key));
    key_.reset(key);
  }

  std::unique_ptr<RSA, void(*)(RSA*)> key_;
};

TEST_P(AndroidPubkeyTest, Decode) {
  // Make sure the decoded key successfully verifies a valid signature.
  EXPECT_TRUE(RSA_verify(NID_sha256, kDigest, sizeof(kDigest),
                         GetParam().signature, GetParam().signature_size,
                         key_.get()));
}

TEST_P(AndroidPubkeyTest, Encode) {
  // Re-encode the key and verify it matches the encoded form.
  const size_t kKeySize = ANDROID_PUBKEY_ENCODED_SIZE_FOR_KEY(key_.get());
  std::unique_ptr<uint8_t[]> key_data(new uint8_t[kKeySize]);
  ASSERT_EQ(kKeySize,
            android_pubkey_encode(key_.get(), key_data.get(), kKeySize));
  ASSERT_EQ(GetParam().pubkey_size, kKeySize);
  ASSERT_EQ(0, memcmp(GetParam().pubkey, key_data.get(), kKeySize));
}

INSTANTIATE_TEST_CASE_P(TestKeys,
                        AndroidPubkeyTest,
                        ::testing::ValuesIn(kTestParams,
                                            kTestParams +
                                                sizeof(kTestParams) /
                                                    sizeof(kTestParams[0])));
