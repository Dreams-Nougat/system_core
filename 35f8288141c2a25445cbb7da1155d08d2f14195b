Revision: 35f8288141c2a25445cbb7da1155d08d2f14195b
Patch-set: 1
File: include/utils/Unicode.h

54
Fri Apr 10 16:40:30 2015 +0000
Author: Johan Redestig <1002951@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_c1e7e628
Bytes: 51
return -1 on invliad surrogate character used here.

54
Fri Apr 10 17:41:21 2015 +0000
Author: Markus Scherer <1022037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_c1e7e628
UUID: 636d8ab3_661373e1
Bytes: 180
No, coming from UTF-32, "such as" is better. In UTF-32, any surrogate is invalid, and any value >10FFFF. In UTF-16, only *unpaired* surrogates are invalid, everything else is fine.

54
Fri Apr 10 19:37:00 2015 +0000
Author: Johan Redestig <1002951@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 636d8ab3_661373e1
UUID: e3617abc_bd35a70d
Bytes: 204
Ok, but my point was that the function returns -1 when it detects errors, so clients need to be prepared to handle it. Isn't this inconsistent with the original implementation of the utf16_to_utf8_length?

54
Fri Apr 10 20:26:09 2015 +0000
Author: Markus Scherer <1022037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_bd35a70d
UUID: e32fba6e_2796fac8
Bytes: 268
AFAIK you are right. I am just commenting on your request to change the API doc for utf32_to_utf8_length() here (not utf16_to_...). I am staying out of the discussion of whether these functions should return an error value or use some "length" for invalid input units.

107:3-107:45
Fri Apr 10 16:08:21 2015 +0000
Author: Markus Scherer <1022037@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83999efb_a263bac6
Bytes: 43
, that is, it contains unpaired surrogates,

File: libutils/Unicode.cpp

416:12-416:37
Fri Apr 10 16:08:21 2015 +0000
Author: Markus Scherer <1022037@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2368f29d_ed7dade2
Bytes: 86
FYI You could use ICU U16_IS_LEAD(*src) and U16_IS_TRAIL(*++src).
from unicode/utf16.h

416:12-416:37
Fri Apr 10 16:40:30 2015 +0000
Author: Johan Redestig <1002951@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2368f29d_ed7dade2
UUID: e3617abc_3a651d46
Bytes: 127
Nothing else in this file is using unicode/utf16.h, doesnt it make more sense to switch to that as part of some larger rewrite?

416:12-416:37
Fri Apr 10 17:41:21 2015 +0000
Author: Markus Scherer <1022037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_3a651d46
UUID: 636d8ab3_86cecfda
Bytes: 131
That's fine with me, I did mark it as FYI. I thought it would be nice to use a macro which is more readable than these expressions.

420:16-420:19
Thu Jan 23 11:44:14 2014 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3243be82_7e1d714e
Bytes: 26
shouldn't this be src+=2 ?

420:16-420:19
Thu Jan 23 11:44:37 2014 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3243be82_7e1d714e
UUID: 3243be82_5e223588
Bytes: 15
Oh, never mind.

420:16-420:19
Fri Jan 24 03:08:26 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3243be82_5e223588
UUID: f265a62a_08d517fa
Bytes: 54
yeah, might have been clearer as *(src + 1) in the if.

422
Fri Jan 24 03:08:26 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72b456b0_42acf63b
Bytes: 175
utf16_to_utf8 doesn't check that it's receiving valid surrogate pairs. this change makes String8's constructors return the empty string for input with invalid surrogate pairs.

422
Fri Feb 07 18:30:48 2014 +0000
Author: Jeff Brown <1003957@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72b456b0_42acf63b
UUID: 123a3aa9_70c6ee34
Bytes: 221
This is a bad change.  It could break code that is unknowingly transporting invalid surrogate pairs.

We should tolerate the problem as before.  And it absolutely must remain consistent with the behavior of utf16_to_utf8.

422
Fri Apr 10 17:41:21 2015 +0000
Author: Markus Scherer <1022037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 123a3aa9_70c6ee34
UUID: 636d8ab3_86e7af54
Bytes: 904
I am agnostic about whether it's ok to change this function to report an error rather than guess a value for it.

The comment would be better as
// illegal: unpaired surrogate

Actually, there is a bug: As is, the new version only detects that a lead surrogate is not followed by a trail surrogate. It does not detect that a trail surrogate was encountered where a single or lead unit should be.

With ICU macros, I would change this to the following which optimizes for the non-surrogate path. Feel free to rewrite into vanilla expressions. Note that the first macro detects either kind of surrogate, and the second quickly disambiguates (single-bit test).

if (U16_IS_SURROGATE(*src)) {
  if (U16_IS_SURROGATE_LEAD(*src) && U16_IS_TRAIL(*++src) {
    // A UTF-16 surrogate pair always maps to 4 bytes in UTF-8.
    ret += 4;
    src++;
  } else {
    // illegal: unpaired surrogate
    return -1;
  }
}

422
Fri Apr 10 19:37:00 2015 +0000
Author: Johan Redestig <1002951@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 636d8ab3_86e7af54
UUID: 6394aac1_a11ada6e
Bytes: 129
Ok, makes sense, if I understand this correctly similar issue is found elsewhere among the unicode functions in this file, right?

422
Fri Apr 10 20:26:09 2015 +0000
Author: Markus Scherer <1022037@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_a11ada6e
UUID: e32fba6e_073f3639
Bytes: 221
I did not inspect other parts of this file.
Would y'all like me to look it over, or do you want to check for yourselves now that you are aware of another issue?
Note: I am an i18n guy, not part of the Android team proper.

File: libutils/tests/Unicode_test.cpp

141
Fri Apr 10 16:08:21 2015 +0000
Author: Markus Scherer <1022037@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4365e6c2_7d8a33e9
Bytes: 43
I don't understand where the +1 comes from.

146:20-146:47
Fri Apr 10 17:41:21 2015 +0000
Author: Markus Scherer <1022037@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e356daec_62329ba2
Bytes: 117
This only tests for an unpaired lead surrogate. Please add a test that uses an unpaired trail surrogate (DC00..DFFF).

