Revision: f41203a6c79aa2ffc5e503d0b9d7fb1c465d1247
Patch-set: 1
File: base/include/base/logging.h

121:2-123:6
Fri Sep 18 02:54:50 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c9ae6393_3e3e71a4
Bytes: 177
If this macro was just if (!(expr)) ...stream(), then "if (something) LOG(INFO) << "hello"; else ..." would cause the else to bind to the if in the macro, which is not intended.

124:4-124:38
Fri Sep 18 02:54:50 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 69c3b75a_9ed78161
Bytes: 360
Use the ternary operator to make a sequence point between ErrnoRestorer and the rest of the logging code to guarantee it happens before. I originally tried using the comma operator, but that conflicted with a gtest macro which assumed no commas. Now that I made other changes to logging_test.cpp, it might be possible to change this back to the comma operator.

124:39-124:62
Fri Sep 18 02:54:50 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e99c0776_fa923d45
Bytes: 164
This looks gross, but when I checked the gcc win32 assembly, it generated no code. The ? operator doesn't even generate any code since everything is known staticly.

124:39-124:62
Fri Sep 18 04:11:29 2015 +0000
Author: Yabin Cui <1056364@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e99c0776_fa923d45
UUID: e9b7a7e1_7f5467c6
Bytes: 633
I think it is a wonderful solution. ternary operator guarantees that the side effects should happen before following expressions. and in c++11, the destructor of temporary objects happen at the end of full expression in reverse order. So the constructor of ErrnoRestorer() happens first, the the destructor of ErrnoRestorer() happens last. It makes me think that && and || operators can be used as alternatives to ternary operator here, right?

Now I want to know whether it supports
((xxx) ? LOG(DEBUG) : LOG(ERROR)) << yyy;
But I think it doesn't matter too much.

I will take care of testing on other platforms other than windows.

124:39-124:62
Fri Sep 18 04:20:33 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e9b7a7e1_7f5467c6
UUID: 89df0b23_e4038e17
Bytes: 817
Yes, I prototyped "ErrnoRestorer() || LogMessage().stream()" and it worked. I didn't prefer that because it called std::ostream::operator bool() (I think) and the type of the expression was bool instead of std::ostream (not that it really matters). I'll leave it to you to choose which is better.

BTW, the public Google Glog code uses a trick with "void operator&()" to cause the expression to be void instead of bool or ostream. That is interesting and probably generates the same code, but it seemed messier.

I don't think the ((xxx) ? LOG...) works because of the if that I used By Design. The reason I used if was to prevent the macro from evaluating to a type (like bool or ostream). But if you really want it to evaluate to a type maybe ternary operator could be used instead of the if.

Thanks for your help.

File: base/logging_test.cpp

97:15-97:16
Fri Sep 18 02:54:50 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e9b7a7e1_df29f34c
Bytes: 101
This {} looks weird, but the gtest docs suggested this to pass multiple statements to ASSERT_DEATH().

