Revision: 4167efbdaf09fe9995c618cdd50ab1773991b200
Patch-set: 6
File: bvb/bvb_util.c

44:8-44:16
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7d8c6c87_b3410285
Bytes: 108
nit: eliminate these macros please -- while succinct, they are not necessary and IMO they reduce readability

44:8-44:16
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7d8c6c87_b3410285
UUID: 5dede836_3f97e7c1
Bytes: 12
OK. Will do.

File: bvb/bvb_util.h

37
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3d76744b_d18046ec
Bytes: 101
nit: consistent naming: header_in / header_out, src / dest, or big_endian_header / host_order_header.

37
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3d76744b_d18046ec
UUID: fdfdbce9_dc57edf7
Bytes: 75
OK, src/dest it is since the function name already has _to_host_byte_order.

File: bvb/bvb_util_unittest.cc

29
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dd7ab832_8e3cdb1b
Bytes: 143
nit: while 42 has the advantage of being the ultimate answer, use a value that exercises all bytes? n32 = 0x11223344; n64 = 0x1122334455667788;

29
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd7ab832_8e3cdb1b
UUID: bdaee4f7_722898c9
Bytes: 24
Yeah, good point. Wilco.

File: bvb/bvb_verify.c

22
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1d71b053_13c254fd
Bytes: 109
nit: lines > 80
suggestion: put just hash prefixes in constants and build the rest of the padding dynamically

22
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1d71b053_13c254fd
UUID: ddf8f8fc_9b344bdc
Bytes: 178
Uh, I don't think I want to build it dynamically since I want it to be easy to see (using e.g. diff(1)) if it has been tampered with. I'm not keen on breaking the lines either...

49
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fd2a1c13_dad06576
Bytes: 75
nit: not used -- maybe it should be compared to the hash_size in the block?

49
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fd2a1c13_dad06576
UUID: fdfdbce9_bc2f8186
Bytes: 23
Nice catch. Doing that.

120
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3d76744b_b7b6ca4f
Bytes: 47
/* */ comment style throughout for consistency?

120
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3d76744b_b7b6ca4f
UUID: fdfdbce9_fc290982
Bytes: 4
Done

126
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3d76744b_341bb864
Bytes: 11
nit: period

126
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3d76744b_341bb864
UUID: 5dede836_5f758b57
Bytes: 4
Done

136:44-136:62
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dd255844_b604a633
Bytes: 6
const?

136:44-136:62
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd255844_b604a633
UUID: 7deaac21_a012ba39
Bytes: 4
Done

157
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1d71b053_10fb2ad9
Bytes: 21
overflow checks here?

157
Thu Feb 18 18:34:47 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1d71b053_10fb2ad9
UUID: 1d22908a_45e3eaec
Bytes: 361
Actually, the code right now is wrong. It requires the user to pass in the exact length of the boot image which he of course doesn't know .... he will just load the entire 16 or 32 MiB boot partition and pass that size as length. I'll change the code so it works that way and I'll also point it out in the docs for this function.

I'll also add overflow checks.

163
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5d8fa87c_a361b211
Bytes: 177
overflow checks here too? For example, offset=1, size=~0 would pass this test.

In all cases below too...

Maybe a utility function to implement the subtleties would be helpful?

163
Thu Feb 18 18:34:47 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5d8fa87c_a361b211
UUID: 9d3680c6_69536542
Bytes: 43
Yeah, adding a utility function to do this.

File: bvb/bvb_verify.h

56:40-56:42
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dd7ab832_4ef35391
Bytes: 5
typo?

56:40-56:42
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd7ab832_4ef35391
UUID: 1d18d02b_d5edfcac
Bytes: 4
Done

60:61-60:68
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fd2a1c13_57f3ce90
Bytes: 4
typo

60:61-60:68
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fd2a1c13_57f3ce90
UUID: bde0a43d_a2d59e64
Bytes: 4
Done

67:4-67:23
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dd255844_b354b89d
Bytes: 21
out_public_key_length

67:4-67:23
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd255844_b354b89d
UUID: dd11d80a_b31978c3
Bytes: 4
Done

72:3-72:17
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1d71b053_f0d53e63
Bytes: 130
Should these policy checks be done by the verify function? Doesn't seem hard if public key and rollback index inputs are provided?

72:3-72:17
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1d71b053_f0d53e63
UUID: 5d06c8d0_f713e09c
Bytes: 113
I'm planning to do this in a higher-level function in libbvb_refimpl() yet to be written, which will also do A/B.

82:62-82:69
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dd255844_f61e9ea7
Bytes: 4
typo

82:62-82:69
Wed Feb 17 23:09:08 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd255844_f61e9ea7
UUID: 9d0cc0ef_d9b09327
Bytes: 78
yeah, my brain tends to get ahead of my fingers... or the other way around :-)

File: bvb/bvb_verify_unittest.cc

48
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dd7ab832_545c4254
Bytes: 32
nit: on line above? (more below)

48
Thu Feb 18 18:34:47 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd7ab832_545c4254
UUID: bd3344d6_8a808beb
Bytes: 4
Done

125:19-125:36
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3d76744b_5743e6ea
Bytes: 39
Also verify minor version change is ok?

125:19-125:36
Thu Feb 18 18:34:47 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3d76744b_5743e6ea
UUID: 1d22908a_654e26b2
Bytes: 20
Good point. Will do.

262:19-262:36
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fd2a1c13_7aeef117
Bytes: 68
Tests for overflow conditions for each of these out-of-bounds tests.

262:19-262:36
Thu Feb 18 18:34:47 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fd2a1c13_7aeef117
UUID: bd3344d6_0a757bd3
Bytes: 10
Yup. Done.

File: bvb/bvbtool_unittest.cc

39:20-39:23
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5d8fa87c_a38c52b5
Bytes: 28
nit: inconsistent BVB vs Bvb

39:20-39:23
Thu Feb 18 18:34:47 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5d8fa87c_a38c52b5
UUID: 22f73149_1df3d3c3
Bytes: 4
Done

49:20-49:28
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fd2a1c13_fab68122
Bytes: 21
Use ReadFileToString?

49:20-49:28
Thu Feb 18 18:34:47 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fd2a1c13_fab68122
UUID: dd1b9859_03756ed3
Bytes: 37
Yeah, it's cleaner that way. Will do.

83
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7d8c6c87_566a045d
Bytes: 36
line > 80 (run through clang-format)

83
Thu Feb 18 22:23:37 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7d8c6c87_566a045d
UUID: 6243e950_98deb920
Bytes: 13
not done yet?

83
Fri Feb 19 16:34:13 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6243e950_98deb920
UUID: 426d0510_b618c808
Bytes: 16
Done now, sorry.

320
Tue Feb 16 21:59:10 2016 +0000
Author: Darren Krahn <1079236@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dd255844_16cf9ace
Bytes: 94
optional: This seems brittle. Maybe that's intentional / useful as a reminder to update tests?

320
Thu Feb 18 18:34:47 2016 +0000
Author: David Zeuthen <1076971@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd255844_16cf9ace
UUID: 22201191_b5cc0081
Bytes: 23
Yeah, it's intentional.

