Revision: 10af20cf50836ed4979f70cfc25d1e0e9e0007c0
Patch-set: 1
File: libbacktrace/BacktraceOffline.cpp

649:60-649:61
Mon Mar 21 18:21:57 2016 +0000
Author: Christopher Ferris <1019050@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5c240ef3_336693fd
Bytes: 12
Extra space.

649:60-649:61
Mon Mar 21 18:35:02 2016 +0000
Author: Yabin Cui <1056364@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5c240ef3_336693fd
UUID: 5c240ef3_b3260397
Bytes: 4
Done

667:0-678:2
Mon Mar 21 18:19:42 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5c240ef3_730c8b1d
Bytes: 44
+narayan in case he has thoughts about this.

667:0-678:2
Mon Mar 21 18:21:57 2016 +0000
Author: Christopher Ferris <1019050@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5c240ef3_730c8b1d
UUID: 5c240ef3_333b33b3
Bytes: 84
I was going to comment that I think you can do this with a unique_ptr and a deleter.

667:0-678:2
Mon Mar 21 18:35:02 2016 +0000
Author: Yabin Cui <1056364@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5c240ef3_333b33b3
UUID: 5c240ef3_d393b7d1
Bytes: 389
I have considered using unique_ptr. But unique_ptr holds a pointer, not a value (Although I know ZipArchiveHandle is in fact a pointer).
So I can't use unique_ptr<ZiparchiveHandle, decltype(CloseArchive)>.

AFAIK, I can only use unique_ptr like this: unique_ptr<void, decltype(&CloseArchive)> p(handle, CloseArchive); Is it fine to take advantage of knowing that ZiparchiveHandle is void*?

667:0-678:2
Mon Mar 21 18:44:47 2016 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5c240ef3_d393b7d1
UUID: 9cb846d6_fc732572
Bytes: 146
Sorry, this API is badly designed and one of my biggest regrets. I should have foreseen a future where there'd be more C++ callers than C callers.

