Revision: 5cd298129ff734567ffbbabc30f93686249cd53b
Patch-set: 1
File: healthd/BatteryMonitor.cpp

317:16-318:67
Mon Feb 22 21:43:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 62a5a9c6_b9690f89
Bytes: 674
This has annoyed me for some time, and I have basically written it off as unnecessary since we are not overflowing the buffer. But this needs to stop, this code is supposed to be a good example :-)

This (and all the others) are a bug waiting to happen to overflow the buffer and lead to negative values for sizeof(dmesgline) - len. Replace the sequence with something like:

 int n = snprintf(...);
 len += min(n, sizeof(dmesgline) - len));

-or-

 len += min(snprintf(...), sizeof(dmesgline) - len));

(if your implementation of min() has no side effects)

snprintf returns the number of bytes it would have written, if it could, not the number of bytes it actually wrote.

317:16-318:67
Wed Feb 24 06:53:02 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 62a5a9c6_b9690f89
UUID: c2981592_422fa767
Bytes: 305
that's _still_ an accident waiting to happen. and really ugly verbose code.

this kind of thing is what asprintf (or, since this is actually C++ and you need to string a bunch of these together anyway, android::base::StringPrintf and std::string operator+=) is for.

just say no to fixed-length buffers...

322:7-328:9
Mon Feb 22 21:43:49 2016 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 82bb7df1_d83ba221
Bytes: 170
alternate:

leave 322 alone, drop len=strlen(dmesgline) (?) on line 330 and add len = snprintf on line 326?

Saves one more pour through the buffer to get the len on 330.

