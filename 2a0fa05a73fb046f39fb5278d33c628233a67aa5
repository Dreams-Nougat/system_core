Revision: 2a0fa05a73fb046f39fb5278d33c628233a67aa5
Patch-set: 2
File: adb/commandline.cpp

502:0-503:61
Fri Jan 29 02:40:19 2016 +0000
Author: Josh Gao <1079148@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9462dabe_da442134
Bytes: 133
I believe these should be info.dwSize.Y and info.dwSize.X respectively, since you can resize the buffer to be larger than the window.

502:0-503:61
Fri Jan 29 07:13:48 2016 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9462dabe_da442134
UUID: 349a0eef_0573987c
Bytes: 526
The problem with using info.dwSize.Y, is that it includes the scroll-back buffer (which everyone has enabled) which doesn't make sense to use in the logical window size. So I left it using info.srWindow. This is largely academic since no one runs full-screen programs with adb shell on Windows.

I made the change to use info.dwSize.X, though I think that is largely theoretical since I don't think anyone runs a console window with the buffer wider than the window. But a good change to make to handle this pathological case.

502:0-503:61
Fri Jan 29 09:09:04 2016 +0000
Author: Josh Gao <1079148@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 349a0eef_0573987c
UUID: 749006cb_64953e5f
Bytes: 490
> I don't think anyone runs a console window with the buffer wider than the window

I noticed this first when increasing the size of the buffer through properties, which doesn't automatically increase the window size. The width of the window would get reported instead of the buffer size, and then resizing the window wouldn't get noticed, since the buffer size didn't change.

(I'm not sure how many people are on pre-Win10, where this matters a lot more, but I'd bet it's pretty sizable.)

502:0-503:61
Fri Jan 29 21:59:44 2016 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 749006cb_64953e5f
UUID: 14950abd_8436ccb5
Bytes: 711
Looks like Win7 lets one drag the window edge to reduce the window width, but keep the buffer width the same. Win7 also lets the user change the buffer width without having to uncheck a checkbox (like Win10). So yeah, using info.dwSize.X makes sense (especially because the underlying OS event is about buffer resizing, not window resizing). I used it in PS3.

I think Win10 was the first version to let the user drag the window edge to make the window (and buffer) wider (https://blogs.windows.com/buildingapps/2014/10/07/console-improvements-in-the-windows-10-technical-preview/). I think this SIGWINCH change will get most used by Win10 users (other than the initial sizing, which of course helps all users).

