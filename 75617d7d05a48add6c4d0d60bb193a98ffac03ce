Revision: 75617d7d05a48add6c4d0d60bb193a98ffac03ce
Patch-set: 10
File: logd/LogBuffer.cpp

252:42-254:9
Wed Sep 30 00:11:13 2015 +0000
Author: Andres Morales <1038928@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15197672_163cdaa3
Bytes: 39
nit: why declare and assign separately?

252:42-254:9
Wed Sep 30 17:00:06 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15197672_163cdaa3
UUID: b5398a03_80d6168a
Bytes: 55
Line wrap, the 'type' and 'rval' exceed 100 characters.

252:42-254:9
Wed Sep 30 23:01:03 2015 +0000
Author: Andres Morales <1038928@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5398a03_80d6168a
UUID: 953c86f3_d38f5421
Bytes: 29
why not wrap the line itself?

252:42-254:9
Wed Sep 30 23:12:04 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 953c86f3_d38f5421
UUID: 75439281_67216033
Bytes: 565
Then it looks like:

    LogBufferPidIteratorMap::iterator p =
        mLastWorstPidOfSystem[id].find(e->getPid());

I find this form harder to read, uglier (matter of taste) and in some ways feels like I am doing one thing split across two lines. Classic 'C' and keeps one thing (define automatic variable, assign lval with rval) per line feels like it reads cleaner.

Does this grate against you in some manner? I know this is a matter of taste, neither is an Android Coding Standard issue. (I am in effect complying with the Linux Coding Standards on line wraps)

252:42-254:9
Wed Sep 30 23:16:53 2015 +0000
Author: Andres Morales <1038928@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75439281_67216033
UUID: b5526a4f_fed33965
Bytes: 276
I prefer that, when I first saw this line I thought the declaration was somewhere at the beginning of the file. Compiler probably fixes this but you do call a default constructor in the first line and a copy constructor in the second. Not a problem though as evinced by my +2.

252:42-254:9
Wed Sep 30 23:29:18 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5526a4f_fed33965
UUID: 15a33681_8c746b54
Bytes: 466
Oh, now I understand why it grates, I am not thinking like a C++ guy that has been bruised by bad optimizers (in 1998 I wrote my own backend peephole optimizer for C/C++ that reduced code size by 70%, so perhaps I was bruised?). In the existing code, with optimization turned off, or a build for an alternate (perhaps non-gcc?) product _may_ result in less efficient binaries.

I feel your pain ... will respin .. your definition of eyesore is 'bigger' than mine ;->

442:12-442:13
Wed Sep 30 00:11:13 2015 +0000
Author: Andres Morales <1038928@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15197672_76daeee1
Bytes: 40
nit: mark scope begin/end with a comment

442:12-442:13
Wed Sep 30 17:00:06 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15197672_76daeee1
UUID: 354d9aaf_bca8a1ee
Bytes: 7
will do

490:16-490:24
Wed Sep 30 00:11:13 2015 +0000
Author: Andres Morales <1038928@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_630d98b1
Bytes: 15
can a PID be 0?

490:16-490:24
Wed Sep 30 17:00:06 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_630d98b1
UUID: 1548969f_de412175
Bytes: 26
Never, guaranteed in POSIX

File: logd/LogWhiteBlackList.cpp

106:22-106:26
Wed Sep 30 00:11:13 2015 +0000
Author: Andres Morales <1038928@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_bd871e03
Bytes: 78
this filter notation is a bit confusing, can you document more how this works?

106:22-106:26
Wed Sep 30 17:00:06 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_bd871e03
UUID: 1548969f_1e59c92a
Bytes: 280
[~][UID][/PID]

Where UID or PID can be replaced with ! to indicate 'worst'. ~ means to blacklist, w/o means whitelist.

I will share the whitelist / blacklist document with you.

Not sure I want to beef this up too much, will consider making the README a little bit more verbose.

File: logd/README.property

26:69-26:72
Wed Sep 30 00:11:13 2015 +0000
Author: Andres Morales <1038928@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f86a1765_13f6d6fa
Bytes: 71
the chattiest UID, and the chattiest PID within the system UID of 1000?

