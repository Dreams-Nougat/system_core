Revision: 54861170c8cd80629d5d4343435eea0d80c125df
Patch-set: 5
File: liblog/logd_write.c

738:4-738:23
Tue Feb 03 01:53:50 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 97854f8c_033550d4
Bytes: 1250
BM_log_light_overhead_fifo benchmarking results reports the overhead of this call is 33us for a total overhead of 36211ns :-(. 3.10 vintage Linux will immediately preempt this thread (even if SCHED_FIFO), and run the Consumer thread to completion before returning to this thread. This was particularly shocking given the SCHED_FIFO caller's priority.

I have tried replacing sem_post(&b->full) with a pipe(2), triggering a third thread to deploy the sem_post, and various futex tricks to no avail. Linux insists (correctly BTW, except for our low-latency goal) that it is more efficient (for throughput) to run the Consumer thread than to stick around in this Producer thread.

The only mitigation that worked so far was to switch to polling in the Consumer thread. Polling allowed us to reduce the BM_log_light_overhead_fifo results to less than 3000ns total overhead. We view polling as unacceptable for a General Purpose feature like this as it consumes cycles. If we must poll, then we are considering it best to leave things alone and let the individual applications form their own latency mitigation strategies?

:-(

We will be exploring more ideas (place consumer thread into runnable state lazily), and come to terms with a polling approach.

811
Tue Feb 03 01:43:58 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b780937a_6786262a
Bytes: 217
Should this be __write_to_log_daemon or __write_to_log_init() ?  On line 855, we transition to __write_to_log_init() when leaving fifo mode.  A quick thought is that both places should transition to the same function.

811
Tue Feb 03 01:53:50 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b780937a_6786262a
UUID: 97854f8c_83640034
Bytes: 489
"This init function knows too much"(tm).

All the activities and locking is identical here as it is for the daemon init variant minus the FIFO init goo; so it is acceptable to go straight to the handler here.

This needs a comment to state that fact.

This is not a frontend selection API as below where we are crippled regarding assumptions, this is an internal initialization handler that if any things fails, it must orderly transition to LOGGER_NORMAL configuration as its backup plan.

