Revision: 23ca39abc8e27636fd49e36e5bde2013a0fef2da
Patch-set: 3
File: trusty/nvram/trusty_nvram_implementation.cpp

38:0-41:60
Thu Mar 10 23:47:25 2016 +0000
Author: Andres Morales <1038928@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 37a21512_917d3e90
Bytes: 121
If you have an application/daemon that will load this module, it's better to provide these arguments on its command line.

38:0-41:60
Fri Mar 11 15:08:05 2016 +0000
Author: Mattias Nissler <1080683@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37a21512_917d3e90
UUID: d79459c3_1b3f7bbc
Bytes: 224
Can you elaborate on a use case for this? I'm happy to make them configurable if that's helpful, but I don't understand the benefit yet. FWIW, the TIPC gatekeeper and keymaster implementation also hard-code these parameters.

121:23-121:29
Thu Mar 10 23:47:25 2016 +0000
Author: Andres Morales <1038928@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 37a21512_91e9be66
Bytes: 68
any reason this is not a constructor param instead of a separate fn?

121:23-121:29
Thu Mar 10 23:49:31 2016 +0000
Author: Andres Morales <1038928@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37a21512_91e9be66
UUID: 37a21512_31f9ea2f
Bytes: 117
also, is this going to be threadsafe? if not you can avoid the allocation and copy the response into a static buffer.

121:23-121:29
Fri Mar 11 15:08:05 2016 +0000
Author: Mattias Nissler <1080683@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37a21512_31f9ea2f
UUID: d79459c3_1b74db9c
Bytes: 341
This is not designed to be reentrant. Getting several independent HAL device instances and using them on different threads should work though. I've now changed the code to avoid the allocation by making the response buffer a TrustyNvramImplementation member. That way, we have a single up-front allocation when creating the NVRAM HAL device.

121:23-121:29
Fri Mar 11 15:08:05 2016 +0000
Author: Mattias Nissler <1080683@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37a21512_91e9be66
UUID: d79459c3_3b7197ad
Bytes: 288
It's difficult to flag allocation failure from within the constructor. I could make it fall back to an empty buffer in the failure case. But then I'd still need a check to verify that the actual size matches the requested size, and the result wouldn't be any simpler from what I have now.

