Revision: f99f8a79635d8f2904edd45a8fd532d2315d76ce
Patch-set: 1
File: init/parser/input_stream.cpp

28:30-28:61
Thu Jul 30 17:05:52 2015 +0000
Author: Jorge Lucangeli Obes <1076138@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d5466e3_53a3b6b0
Bytes: 85
Would it make sense for this to return a smarter struct that would prevent OOB reads?

28:30-28:61
Thu Jul 30 17:07:27 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d5466e3_53a3b6b0
UUID: 8d9472c2_e1bce208
Bytes: 83
(that's another reason i'd like to move to just reading files in as a std::string.)

File: init/parser/input_stream.h

30:0-30:2
Thu Jul 30 17:05:52 2015 +0000
Author: Jorge Lucangeli Obes <1076138@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed3dee9f_31eb8aec
Bytes: 46
What are we doing with indentation in the end?

35:13-35:19
Thu Jul 30 17:05:52 2015 +0000
Author: Jorge Lucangeli Obes <1076138@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d6242c0_fa2645ea
Bytes: 10
Nit: past?

55:38-55:46
Thu Jul 30 17:05:52 2015 +0000
Author: Jorge Lucangeli Obes <1076138@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d4d1a59_547562bc
Bytes: 12
Nit: outlive

File: init/parser/scoped_fd.cpp

20:22-20:26
Thu Jul 30 17:05:52 2015 +0000
Author: Jorge Lucangeli Obes <1076138@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d57a2ea_d21a422f
Bytes: 12
Extra space.

39:15-39:19
Thu Jul 30 17:05:52 2015 +0000
Author: Jorge Lucangeli Obes <1076138@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d6242c0_7a13158e
Bytes: 151
In https://code.google.com/p/chromium/codesearch#chromium/src/base/scoped_generic.h this operation would be called "Reset", since it also does Close().

File: init/parser/tokenizer.cpp

64:26-64:35
Thu Jul 30 17:05:52 2015 +0000
Author: Jorge Lucangeli Obes <1076138@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed3dee9f_31f2aad8
Bytes: 14
Nit: backslash

63:6-67:28
Thu Jul 30 17:05:52 2015 +0000
Author: Jorge Lucangeli Obes <1076138@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d6242c0_da60a102
Bytes: 107
Doesn't this mean you should just skip the backslash and continue tokenizing without producing TOK_NEWLINE?

95
Thu Jul 30 17:01:23 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a40cc41_36d5a02f
Bytes: 288
since you're copying here anyway, wouldn't it be easier to just read the whole file into a std::string with the existing android::base::ReadFileToString and then have your tokenizer work on a std::string (which is fine for both real life and tests, and lets you remove most of this code)?

95
Thu Jul 30 17:28:21 2015 +0000
Author: Lee Campbell <1052976@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a40cc41_36d5a02f
UUID: 4a3980cf_e55f5eba
Bytes: 671
I only did it this way to keep the peak memory usage down as you only read a block at a time and only one token is alive at a given point, which should also be small. So unless a token is greater than the blocksize(1024) this code shouldn't use more than that.

I kinda worry with allocating large buffers that people change default allocators and some are bad at giving back pages to the kernel. 

e.g 
buf = malloc(10MB); free(buf);
In some allocators they do not unmap the pages in the free and keep them hot in the heap pool. So the private dirty ram stays at 10MB.

So I think don't do arbitrarily big allocations if you don't have to - maybe I'm stuck in the 90s :)

95
Thu Jul 30 17:35:26 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a3980cf_e55f5eba
UUID: 0a430851_d297821b
Bytes: 199
yeah, time to move on. i'm not aware of such problems with either of our allocators, and if there were, we'd want to fix them there.

(also, if you have a 10MiB init.rc, you have other problems :-) )

