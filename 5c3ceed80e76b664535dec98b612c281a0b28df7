Revision: 5c3ceed80e76b664535dec98b612c281a0b28df7
Patch-set: 1
File: libziparchive/zip_archive.cc

988
Thu Mar 12 17:10:55 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a19cdad8_cdfd69ec
Bytes: 16
aka std::vector?

988
Thu Mar 12 17:12:48 2015 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a19cdad8_cdfd69ec
UUID: 01d1268c_a840db65
Bytes: 102
I do not know... they are fixed size buffers we pass to zlib... vector does not seem appropriate here.

988
Thu Mar 12 18:42:46 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 01d1268c_a840db65
UUID: e18892a6_5fb80b58
Bytes: 429
i think you're thinking about vector wrong. a vector is a dynamically-allocated contiguous sequence. that's exactly what you have here. that it has additional functionality you don't need... well, so does unique_ptr. that's not a problem.

the way i see it, preferring vector in cases like this is just part of "avoid new/delete". (plus there's the added bonus -- see below -- that vector is more container-like than unique_ptr.)

988
Thu Mar 12 18:44:30 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e18892a6_5fb80b58
UUID: 81c436d3_279d34ae
Bytes: 147
(actually, the "added bonus" isn't true. the unique_ptr for T[] has an operator[], so you can still use the container syntax even with unique_ptr.)

988
Thu Mar 12 20:10:04 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 81c436d3_279d34ae
UUID: e1ec123e_4212d408
Bytes: 316
oh... i didn't know that. that might even tip the scales towards std::unique_ptr for me, personally. i don't think std::vector is as intention revealing since we'll need to inspect code to see if it's being resized etc. i'll continue to use std::vector<> however, since that's consistent with the rest of our usages.

988
Thu Mar 12 20:23:21 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e1ec123e_4212d408
UUID: 414a3e43_b255c0a3
Bytes: 355
i'd argue that you shouldn't care whether it's being resized. hiding the consequences of that is vector's job. vector is the default contiguous container. unique_ptr is for when someone else you don't control has allocated something and you need to keep track of it. it adds RAII to raw pointers. but you have no reason to be dealing in raw pointers here.

988
Thu Mar 12 20:26:35 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 414a3e43_b255c0a3
UUID: e1ec123e_e245e802
Bytes: 265
in some cases, you would care if you're passing it to a C api (where you usually pass a raw pointer and a length). for example in this function i'd have to update avail_out = write_buf.size(); initially and inside the loop unless i can prove it isn't being resized.

988
Thu Mar 12 20:30:59 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e1ec123e_e245e802
UUID: 2168ea9d_3c8a7de8
Bytes: 450
yes, but i'd say that was a good thing :-) that's how you should be using containers. (even if you did actually want an array for some bizarre reason, you should still be using std::array and &x[0] and size().)

you're both trying to make a special case out of something that can happily fall out of the default case. and that's what's weird. it makes the reader stop and ask "huh; why isn't this just the default contiguous container --- a vector?".

988
Thu Mar 12 20:40:28 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2168ea9d_3c8a7de8
UUID: 01ea0620_63ea7c23
Bytes: 223
fair enough. i still think there's some value in making it clear we don't want things to be resizable (and even there you'd use std::array) but point taken.

i'm just too used to the old style scoped_array and scoped_ptr :)

1001
Thu Mar 12 17:10:55 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e1d33294_e7de8253
Bytes: 6
&x[0]?

1001
Thu Mar 12 17:12:48 2015 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e1d33294_e7de8253
UUID: 01d1268c_e83ad3eb
Bytes: 11
see above..

