Revision: 6998466ffa73bfdefbb99d0679e00fa47d203935
Patch-set: 8
File: libzipfile/centraldir.c

7
Mon May 05 16:59:27 2014 +0000
Author: raphael <1001100@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8aba749a_79469388
Bytes: 76
Please don't undefine _WIN32. Why would you even do that in the first place?

7
Mon May 05 20:25:27 2014 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8aba749a_79469388
UUID: 8a2fd4b4_b1828a3c
Bytes: 182
with cygwin builds (?), I was under the impression we had access to glibc. This same undef combination exists in multiple files.

All the other files are going to need to be audited.

166:0-170:6
Mon May 05 16:30:21 2014 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aacbb83b_c5523e46
Bytes: 71
The sdk team needs to solve this discrepancy and nullify this fragment.

166:0-170:6
Mon May 05 16:59:27 2014 +0000
Author: raphael <1001100@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aacbb83b_c5523e46
UUID: aacbb83b_8076645b
Bytes: 653
The issue is legit.
Please see it the other way: there is NO %zd support for printf in the Win32 libs. So that will crash at runtime. Instead you have 2 choices:
1- If the method is useful for a *desktop* host exec, then use %ld instead of %zd. Use #ifdef HAVE_PRINTF_ZD (see core/combo/include/arch/windows/AndroidConfig.h) to differentiate. See core/include/utils/Compat.h for an example of usage.
2- If the method is NOT useful for a desktop/host exec (e.g. it will never be used by any sdk tool running on Windows) then deactive the whole method here and it the headers.

In this case I believe libzipfile is used by aapt on windows so please do #1.

166:0-170:6
Mon May 05 20:25:27 2014 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aacbb83b_8076645b
UUID: 6a346007_07f21a7b
Bytes: 1526
There was a massive (I know, emotive) undertaking for the 64-bit compile issues to replace all %d/%u and %ld/%lu with %zd/%zu format and scanf to size_t/ssize_t objects in the past two months. Similarly replacing %d/%u/%ld/%lu/%lld/%llu with PRI?XX/SCN?XX. Fortunately most resided in the ALOG formats so the impact might be small functionally in the sdk; but still not insignificant. As you see, we had %zd here *before* and was left broken until I came to the scene here. We also see that the WORD type, which is supposed to be a u32, is *not* properly handled by inttypes.h.

HAVE_PRINTF_ZD is not pretty and is too coarse (given just how widespread I think this problem is). I believe this is the tip of the iceberg. I would suggest that a series of made up additions to inttypes.h need to be defined (WAG, these certainly need to be refined):

               Android         Windows
PRIuWORD       PRIu32          "lu"
SCNuWORD       SCNu32          "lu"
PRIdWORD       PRId32          "ld"
SCNdWORD       SCNd32          "ld"
PRIuSIZE       "zu"            "lu"
PRIdSSIZE      "zd"            "ld"
SCNuSIZE       "zu"            "lu"
SCNdSSIZE      "zd"            "ld"
PRIuPTRDIFF    "tu"            "u"/"lu"     (?)
PRIdPTRDIFF    "td"            "d"/"ld"     (?)

Some of these would be automatic if __WORDSIZE was defined as 32 before inttypes.h comes along, alas this can not be used as this is rather specifically requiring of a properly defined inttypes.h. Leaving only the %t & %z format strings to be filled in.

