Revision: ba9fd3df08e3baabbb82be3a9f250fdba5a0f21b
Patch-set: 1
File: libcutils/fs_config.c

34
Fri Apr 03 20:23:05 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63f74ae2_38062d4e
Bytes: 156
Should there be alignment pragma's with this to ensure that it's formatted the same across architectures, especially since we're writing this out to a file?

119:3-119:13
Thu Apr 02 22:41:33 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23c4727c_705f08fa
Bytes: 55
Really should state 'if not bionic version of unistd.h'

119:3-119:13
Fri Apr 03 00:15:50 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_705f08fa
UUID: 23c4727c_dce14b15
Bytes: 81
*please* just pull in one of the existing ones. there are so many to choose from!

119:3-119:13
Fri Apr 03 00:48:28 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_dce14b15
UUID: 23c4727c_907977c3
Bytes: 61
Do we have unistd.h defined with this on all platforms (MAC?)

119:3-119:13
Fri Apr 03 03:21:46 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_907977c3
UUID: c3d47630_7cddb10a
Bytes: 126
no. that's why there are so many choices in the tree. <utils/Compat.h> is popular. i see <cutils/fs.h> has one too. et cetera.

119:3-119:13
Fri Apr 03 15:09:54 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3d47630_7cddb10a
UUID: 23c4727c_64f2a1b7
Bytes: 81
Ahh, got it, I was looking left instead of down at my feet, cutils/fs.h <perfect>

119:3-119:13
Fri Apr 03 15:21:52 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_64f2a1b7
UUID: 23c4727c_a4be79a0
Bytes: 231
yeah --- that's the real problem (and why i complained about this): most of the copies are in weird places. we should try to maneuver them into commonly-included .h files so everyone just has them by accident :-)

http://b/20059045

139:13-139:49
Thu Apr 02 22:41:33 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23c4727c_306990a5
Bytes: 79
Demonstrate precedence here by ensuring that the comparison is within brackets.

139:13-139:49
Fri Apr 03 00:06:33 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_306990a5
UUID: e3bdfae6_52e883f8
Bytes: 161
Since we know if we're using conf_file or conf_dir based on what the dir parameter is set to, can we simply do 
+ (dir ? sizeof(conf_dir) : sizeof(conf_file))

?

139:13-139:49
Fri Apr 03 00:15:50 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3bdfae6_52e883f8
UUID: e3bdfae6_d5ad9d15
Bytes: 9
asprintf?

139:13-139:49
Fri Apr 03 00:48:28 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3bdfae6_d5ad9d15
UUID: 23c4727c_10c9e7a6
Bytes: 82
I was concerned asprintf was not available on all platforms when I did this (MAC?)

139:13-139:49
Fri Apr 03 00:48:28 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3bdfae6_52e883f8
UUID: 23c4727c_1c62233b
Bytes: 101
I used to have that, it results in 'code', this one reduces to a constant and thus a simple addition.

139:13-139:49
Fri Apr 03 03:21:46 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_10c9e7a6
UUID: 03092eaf_0b38c19b
Bytes: 110
https://developer.apple.com/library/ios/documentation/System/Conceptual/ManPages_iPhoneOS/man3/asprintf.3.html

147:37-147:63
Thu Apr 02 23:00:15 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23c4727c_1057ac60
Bytes: 98
Could probably reuse name here, so that TEMP_FAILURE_RETRY is not continuously re-evaluating this?

147:37-147:63
Fri Apr 03 00:15:50 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_1057ac60
UUID: e3bdfae6_75a5b129
Bytes: 43
why bother? it would only be less readable.

147:37-147:63
Fri Apr 03 00:48:28 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3bdfae6_75a5b129
UUID: 23c4727c_3012ab90
Bytes: 117
I viewed it as more readable since it would change this line to match exactly the open above. No problem, as-is then.

147:37-147:63
Fri Apr 03 03:21:46 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_3012ab90
UUID: c3d47630_9ce76dd8
Bytes: 98
L142 hurts my brain enough already. i think you should be moving _away_ from that, not towards it!

147:37-147:63
Fri Apr 03 15:09:54 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3d47630_9ce76dd8
UUID: e3bdfae6_970165bf
Bytes: 26
L142 will get split up ...

164
Fri Apr 03 00:06:33 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23c4727c_1620c498
Bytes: 274
Nit-picky, but could we make this a do while loop instead of using break?  It's the same as TEMP_FAILURE_RETRY, which is what I believe this is emulating.

do {
address = mmap(NULL, st.st_size, PROT_READ, MAP_PRIVATE, fd, 0);
while (address == MAP_FAILED && errno == EINTR);

164
Fri Apr 03 00:48:28 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_1620c498
UUID: 23c4727c_901cd795
Bytes: 52
You get a warning for _rc == -1, -Werror tears this.

164
Fri Apr 03 15:09:54 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_901cd795
UUID: e3bdfae6_d70c7def
Bytes: 83
Post CL cleanup. @enh should we fix all the variants do to _rc == (typeof (exp))-1?

164
Fri Apr 03 15:21:52 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3bdfae6_d70c7def
UUID: 23c4727c_24e389cf
Bytes: 37
is EINTR from mmap actually possible?

164
Fri Apr 03 18:01:49 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23c4727c_24e389cf
UUID: 23c4727c_55ace99c
Bytes: 213
Ummmm IDK ;-) you may be right, it sets up the address pointing to a null page with copy on access. There are no expected resource contentions to result in a sleep. Until I am 100% sure, and I will investigate ...

188
Fri Apr 03 20:23:05 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63f74ae2_9d7cf335
Bytes: 460
Why is there a -sizeof(*p) here?  This won't get us the last entry of the file, since the size of the last entry is (sizeof(*p) + strlen(pc->prefix) + sizeof(uint64_t)) & -sizeof(uint64_t); Even if pc->prefix is null, there is the alignment space too.

Doesn't continually incrementing p by p->len get us to exactly address + st.st_size?  Why not set e = (const struct fs_path_config_from_file *)((const char *)address + st.st_size and keep the check as p < e?

190:26-190:32
Fri Apr 03 20:23:05 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23c4727c_9b950f43
Bytes: 271
Should we use strnlen since we know the buffer size and there's no guarantee the input file will have a null character to stop strlen from overrunning?

Maybe even combine this and be below lines into,

len = strnlen(p->prefix, min(MAX_BUFFER_SIZE, p->len - sizeof(*p)));

195:30-195:71
Fri Apr 03 20:23:05 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3bdfae6_68edcb86
Bytes: 191
(const char *)p + sizeof(*p) + len > (const char *)address + st.st_size

It's a more straight forward check to me, especially if address + st.st_size ends up being used in the loop condition.

