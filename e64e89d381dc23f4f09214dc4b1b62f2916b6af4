Revision: e64e89d381dc23f4f09214dc4b1b62f2916b6af4
Patch-set: 2
File: libcutils/fs_config.c

184
Fri Apr 03 23:13:24 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3bdfae6_cbe84c7e
Bytes: 316
I think this is off by a factor of sizeof(*p)

In my mind, I think of this as

if ((const char *)p + p->len > end)
= if ((const char *)p + sizeof(*p) + remainder > end)
= if (sizeof(*p) + remainder > end - (const char *)p)

We can again do the first check, then clamp remainder to end - (const char *)p - sizeof(*p);

184
Fri Apr 03 23:22:24 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3bdfae6_cbe84c7e
UUID: 63f74ae2_a0aae34c
Bytes: 207
Good catch, I split 'end; and 'e' to reduce the confusion about 'e' in your previous comments, then I made the blind mistake of replacing e with end trying to get some savings on the casts I had here before.

184
Fri Apr 03 23:44:42 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63f74ae2_a0aae34c
UUID: e3bdfae6_c6ba834e
Bytes: 183
Any thought on using just if ((const char *)p + p->len > end) ?  It's more intuitive to me and since remainder is calculated from those values it will also be checked for correctness.

188
Fri Apr 03 23:13:24 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3bdfae6_0b0884e0
Bytes: 256
I don't think we need the > check

strnlen is going to cap len to remainder which already is at most (end - (const char *)p), so this condition cannot be >.

The == part of the check is still important in case we don't hit a \0 before the end of the string

188
Fri Apr 03 23:22:24 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3bdfae6_0b0884e0
UUID: 63f74ae2_40bb2fb2
Bytes: 349
Should be e - p. '>=' costs us nothing, and guarantees reliability when other hands get into here. It is a code robustness issue. Pedantics will lead us to == and if someone makes a mistake adjusting the code above this in the future, we will live another day.

NB: the mess above is cousin to the type of programming mistake I hope to catch with >=

188
Fri Apr 03 23:44:42 2015 +0000
Author: Tom Cherry <1064128@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63f74ae2_40bb2fb2
UUID: 63f74ae2_1be36621
Bytes: 18
Sounds reasonable.

