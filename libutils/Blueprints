// Copyright (C) 2008 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// libutils is a little unique: It's built twice, once for the host
// and once for the device.

commonSources = [
    "BasicHashtable.cpp",
    "BlobCache.cpp",
    "CallStack.cpp",
    "FileMap.cpp",
    "JenkinsHash.cpp",
    "LinearAllocator.cpp",
    "LinearTransform.cpp",
    "Log.cpp",
    "NativeHandle.cpp",
    "Printer.cpp",
    "ProcessCallStack.cpp",
    "PropertyMap.cpp",
    "RefBase.cpp",
    "SharedBuffer.cpp",
    "Static.cpp",
    "StopWatch.cpp",
    "String8.cpp",
    "String16.cpp",
    "SystemClock.cpp",
    "Threads.cpp",
    "Timers.cpp",
    "Tokenizer.cpp",
    "Unicode.cpp",
    "VectorImpl.cpp",
    "misc.cpp",
]

host_commonCflags = [
    "-DLIBUTILS_NATIVE=1",
    //TOOL_CFLAGS,
    "-Werror",
]

// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(strip $(USE_CYGWIN),),)
// Under MinGW, ctype.h doesn't need multi-byte support
//
// host_commonCflags += ["-DMB_CUR_MAX=1"] // ANDROIDMK TRANSLATION ERROR: conditional eq ($(HOST_OS),windows) on global assignment
// host_commonCflags+=-DMB_CUR_MAX=1
// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif

// For the host
// =====================================================
cc_library_host_static {
    target: {
        linux: {
            srcs: commonSources + ["Looper.cpp"],
            cflags: host_commonCflags,
        },
        darwin: {
            srcs: commonSources,
            cflags: host_commonCflags + ["-Wno-unused-parameter"],
        },
    },

    name: "libutils_host",
    static_libs: ["liblog"],
    compile_multilib: "both",
}

// For the device, static
// =====================================================
static_commonCflags = ["-Werror"]

cc_library_static {

    // we have the common sources, plus some device-specific stuff
    srcs: commonSources + [
        "Looper.cpp",
        "Trace.cpp",
    ],
    // TODO: remove this once we figure out where to put it globally
    // In the old build, it was added as part of the JNI_H_INCLUDE
    include_dirs: ["libnativehelper/include/nativehelper"],

    cflags: static_commonCflags,

    arch: {
        mips: {
            cflags: static_commonCflags + ["-DALIGN_DOUBLE"],
        },
    },

    static_libs: ["libcutils"],

    shared_libs: [
        "libbacktrace",
        "liblog",
        "libdl",
    ],

    name: "libutils_static",
}

// For the device, shared
// =====================================================
cc_library_shared {
    name: "libutils",
    whole_static_libs: ["libutils_static"],
    shared_libs: [
        "libbacktrace",
        "libcutils",
        "libdl",
        "liblog",
    ],
    cflags: ["-Werror"],
}

// Include subdirectory makefiles
// ============================================================

// If we're building with ONE_SHOT_MAKEFILE (mm, mmm), then what the framework
// team really wants is to build the stuff defined by this makefile.
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq (,$(ONE_SHOT_MAKEFILE))
// ANDROIDMK TRANSLATION ERROR: unsupported include
// include $(call first-makefiles-under,$(LOCAL_PATH))
// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
