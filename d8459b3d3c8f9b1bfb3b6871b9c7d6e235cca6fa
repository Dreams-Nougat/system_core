Revision: d8459b3d3c8f9b1bfb3b6871b9c7d6e235cca6fa
Patch-set: 3
File: adb/transport.cpp

46:7-46:20
Wed Aug 26 22:55:57 2015 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 048f817d_5bf7794d
Bytes: 546
Technically tsan is clearly correct.  This is a data race, which has undefined behavior.  Whether it can actually fail in practice is complicated.  In the old version, I think it would be correct, for example, for the compiler to remove the second t->kicked load, since it can assume the first one doesn't race, and hence the value can't change.  That would allow t->kick(t) to execute more than once, which certainly violates the intent of the code.

I suspect no current compiler does that.  I wouldn't be surprised if people are working on it.

46:7-46:20
Thu Aug 27 17:42:21 2015 +0000
Author: Yabin Cui <1056364@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 048f817d_5bf7794d
UUID: a47f9520_3e57fcd8
Bytes: 261
But I can assume there is a load operation with memory_order_acquire in adb_mutex_lock. No memory accesses in the current thread can be reordered before this load. So I think the second t->kicked should never reuse the content of the first t->kicked. Not right?

