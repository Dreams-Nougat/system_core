Revision: 9302a362e110760ebf3a8e17cf7fd1b2faed5602
Patch-set: 2
File: crash_reporter/crash_sender

186
Mon Sep 14 21:38:49 2015 +0000
Author: Mike Frysinger <1040868@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44997af8_dc5b4de6
Bytes: 219
i'd still like to see a comment above this func explaining things and linking to the POSIX docs.  this limitation/behavior was something that hadn't occurred to me before and seems esoteric enough to warrant some notes.

186
Mon Sep 14 21:54:21 2015 +0000
Author: Steve Fung <1076778@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44997af8_dc5b4de6
UUID: 8478d270_b0c868e4
Bytes: 671
Hows this sound:

# Generate a uniform random number in 0..max-1.

# POSIX arithmetic expansion uses signed long integers.  Some shell implementations

# instead use 32-bit signed integers, in which case the 32-bit random number read from

# /dev/urandom may be interpreted as negative when used inside an arithmetic expansion.

# For this case, simply take the absolute value, which will still give a roughly uniform

# random distribution for the modulo.

# See corresponding Arithmetic Expansion and Arithmetic Expression sections:

# POSIX: http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_04

# mksh: http://linux.die.net/man/1/mksh

186
Mon Sep 14 22:10:10 2015 +0000
Author: Mike Frysinger <1040868@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8478d270_b0c868e4
UUID: 047ce255_8566c431
Bytes: 844
that's a little misleading.  how about:

 # Generate a uniform random number in 0..max-1.
 # POSIX arithmetic expansion requires support of at least signed long integers.
 # On 32-bit systems, that may mean 32-bit signed integers, in which case the
 # 32-bit random number read from /dev/urandom may be interpreted as negative
 # when used inside an arithmetic expansion (since the high bit might be set).
 # mksh at least is known to behave this way.
 # For this case, simply take the absolute value, which will still give a roughly
 # uniform random distribution for the modulo (as we are merely ignoring the
 # high/sign bit).
 # See corresponding Arithmetic Expansion and Arithmetic Expression sections:
 # POSIX: http://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_04
 # mksh: http://linux.die.net/man/1/mksh

