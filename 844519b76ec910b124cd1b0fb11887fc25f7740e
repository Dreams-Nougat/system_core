Revision: 844519b76ec910b124cd1b0fb11887fc25f7740e
Patch-set: 3
File: /COMMIT_MSG

12:2-12:15
Thu Oct 13 04:39:22 2016 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dcbf42c0_1d1457b2
Bytes: 56
why does webview_zygote need access to emulated storage?

12
Fri Oct 14 00:02:53 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dcbf42c0_1d1457b2
UUID: fc95e6fb_8cc78f40
Bytes: 662
I'm granting this so that this call in ForkAndSpecializeCommon() can succeed: https://android.googlesource.com/platform/frameworks/base/+/e4f8d69c58e3/core/jni/com_android_internal_os_Zygote.cpp#483. But we don't ever call https://android.googlesource.com/platform/frameworks/base/+/e4f8d69c58e3/core/jni/com_android_internal_os_Zygote.cpp#668 in the webview_zygote, so we may be able to skip this. The issue is that currently the framework tries to unshare/remount unconditionally, so this fails without the cap.

Maybe there's a better alternative (check for emulated storage, and if it's not currently mounted, don't proceed?)? I wanted your thoughts on that.

12
Fri Oct 14 03:44:25 2016 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fc95e6fb_8cc78f40
UUID: bc244e48_c7b2ce50
Bytes: 40
can we skip checking for webview_zygote?

12
Fri Oct 14 20:40:49 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bc244e48_c7b2ce50
UUID: bc528ec4_c928958e
Bytes: 328
We can definitely skip the attempts to mount(). The app zygote currently sets up a new mount namespace when it starts (though we could have init do this for webview_zygote if necessary). And each time the zygote forks, it also creates a new mount namespace in the child. Can we skip that since we're not mounting in the storage?

12
Fri Oct 14 21:34:59 2016 +0000
Author: Jeff Sharkey <1013508@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bc528ec4_c928958e
UUID: 5c0d132b_97e464f4
Bytes: 165
Yeah, I'm fully supportive of finding a way to remove CAP_SYS_ADMIN from webview_zygote.  Hopefully skipping any unshare() or mount() operations can accomplish that?

12
Fri Oct 21 00:49:05 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5c0d132b_97e464f4
UUID: 7c83b787_a395841d
Bytes: 1203
I agree removing CAP_SYS_ADMIN would be great. To recap how storage currently works:

When the zygote starts, it creates a mount namespace, remounts the rootfs as MS_SLAVE, and then unmounts /storage. Every time the zygote creates a process, in the child it creates another mount namespace, re-mounts /storage from /mnt/runtime depending on the app's permission, and then mounts the multi-user specific storage area.

Removing CAP_SYS_ADMIN from webview_zygote will mean we can't perform any of the unmount/remounting. Init has a feature to start a service in a new mount namespace, so we can use that. And since isolated apps are always MOUNT_EXTERNAL_NONE, we don't ever need to mount /mnt/runtime into the namespace. The one task we can't do, though, is unmount /storage in the webview_zygote. So by just removing CAP_SYS_ADMIN (and finding a clean way to short-circuit MountEmulatedStorage) there would be two differences between isolated_app from zygote and webview_zygote:

- /storage wouldn't be unmounted
- No individual mount namespaces per process (it would inherit the namespace webview_zygote was put in by init)

isolated_app inherits read perms from appdomain into /storage, so is that OK?

12
Fri Oct 21 16:21:24 2016 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c83b787_a395841d
UUID: 7c83b787_296b15a1
Bytes: 330
> isolated_app inherits read perms from appdomain into /storage, so is that OK?

That doesn't seem OK at all. Here's a CL to address that: https://android-review.googlesource.com/#/c/292656/

With isolated_app no longer allowed to access storage, what security properties do we lose by inheriting webview_zygote's mount namespace?

13:38-13:46
Thu Oct 13 04:39:22 2016 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dcbf42c0_fdd5dbd8
Bytes: 8
bounding

13
Fri Oct 14 00:02:53 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dcbf42c0_fdd5dbd8
UUID: fc95e6fb_aca60baa
Bytes: 4
Done

File: libcutils/fs_config.c

153:28-153:37
Thu Oct 13 04:39:22 2016 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dcbf42c0_5df7af71
Bytes: 8
AID_ROOT

153:6-153:10
Thu Oct 13 04:39:22 2016 +0000
Author: Jeffrey Vander Stoep <1054468@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dcbf42c0_3d02f370
Bytes: 10
750 or 754

153
Fri Oct 14 00:02:53 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dcbf42c0_3d02f370
UUID: fc95e6fb_ecde53fe
Bytes: 4
Done

153
Fri Oct 14 00:02:53 2016 +0000
Author: Robert Sesek <1042203@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dcbf42c0_5df7af71
UUID: fc95e6fb_4ceae79a
Bytes: 4
Done

