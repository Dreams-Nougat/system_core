Revision: 62386f1b4ed511fd4df8e2afe14eeee0dfc7716d
Patch-set: 13
File: rootdir/init.rc

323:4-323:115
Thu Apr 09 16:43:53 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_fa19e679
Bytes: 302
exec is run blocking/single-threaded inline

If this was defined as a onetime service (eg: logd-reinit for example) and triggered with start here, then it proceeds in the background with no boot delays.

_must_ this check be done as an exec here, or can it tolerate a race-condition<<<<<<<<<<<<<<delay?

323:4-323:115
Thu Apr 09 17:03:18 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_fa19e679
UUID: 03d12e8c_ae5d8359
Bytes: 790
It can probably survive some slop. Providing it has done its work before anything that uses the data tries to use it then it's probably ok.

Things that might try to use it are anything built using bionic and use functions like localtime / mktime.

Later on, ART-based executables that use ICU4J or libcore (e.g. the zygote and or app_process things like package manager) are also users of the timezone data. It would probably be bad if the data being deleted disappeared during launch, but it's ok after because all the users should copy with an unlink (and just keep using the old data).

I thought exec was defined as a wrapper around a onetime service? Or is the idea that we'd give it the same class as several other things and so all the things in that class would be started at once?

323:4-323:115
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_fa19e679
UUID: 03868e96_3627e569
Bytes: 437
he wants to make sure that the right tzdata is in place before anything starts running. his dependency on logd means he's guaranteeing that it'll take two reboots before logd sees the new tzdata. but i don't think logd uses tzdata so it shouldn't matter. (but this is another example of why i don't think this is the best solution in the long term. it just happens to be a major leap forward from where we are, and much more achievable.)

323:4-323:115
Thu Apr 09 17:16:40 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03d12e8c_ae5d8359
UUID: 83c43ed3_d5b95b11
Bytes: 284
"I thought exec was defined as a wrapper around a onetime service?"

it is. but...

"exec is run blocking"

is also true. otherwise you'd just use a oneshot service :-) the point of exec is that it says "i want you to do this now, and i need to know it's been done before i continue".

File: tzdatacheck/tzdatacheck.cpp

16
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_dac98a2b
Bytes: 179
blank line before #includes, and C++ headers are supposed to come after C headers ( https://google-styleguide.googlecode.com/svn/trunk/cppguide.html#Names_and_Order_of_Includes ).

16
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_dac98a2b
UUID: 6394aac1_9ebb7958
Bytes: 4
Done

30
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_1ad4c2c1
Bytes: 66
static const char*. (avoid globals with constructors/destructors.)

30
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_1ad4c2c1
UUID: e3617abc_5a3bb19a
Bytes: 4
Done

35
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_75516268
Bytes: 7
headers

35
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_75516268
UUID: a38a229d_a05654b3
Bytes: 4
Done

37
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_365605b3
Bytes: 78
did you mean to have \n on each line, so this is wrapped when it's output too?

37
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_365605b3
UUID: 6394aac1_bec035cf
Bytes: 61
No. The other newlines are for formatting / paragraph breaks.

46
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_d5486eb9
Bytes: 19
check return value.

46
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_d5486eb9
UUID: e3617abc_9ac9c92c
Bytes: 4
Done

58
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_169f41df
Bytes: 168
there's a std::vector constructor that takes two pointers that will do the sizing & copy for you. (number 4:  http://en.cppreference.com/w/cpp/container/vector/vector )

58
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_169f41df
UUID: a38a229d_831c0296
Bytes: 61
Doesn't that mean I have to worry about adding the \0 myself?

58
Fri Apr 10 17:15:47 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_831c0296
UUID: 636d8ab3_c6c9a72b
Bytes: 67
no, because c_str returns you a pointer to a NUL-terminated string.

58
Fri Apr 10 17:26:43 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 636d8ab3_c6c9a72b
UUID: e3617abc_fde1df14
Bytes: 176
Can you give an example of what you meant? I clearly didn't understand what you were suggesting and it'll just be quicker than me firing things I thought you meant back at you.

58
Fri Apr 10 17:32:22 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_fde1df14
UUID: 234d525a_b38a12e6
Bytes: 61
(see comments on new patch for an even simpler way to do it.)

61
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_969351d7
Bytes: 74
or just replace these three lines with

  return dirname(&dirNameCopy[0]);

61
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_969351d7
UUID: a38a229d_43f4bad3
Bytes: 87
That didn't look portable. (Based on linux's manual). I know you're right for bionic...

61
Fri Apr 10 17:15:47 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_43f4bad3
UUID: 636d8ab3_06d47fc1
Bytes: 4
huh?

61
Fri Apr 10 17:26:43 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 636d8ab3_06d47fc1
UUID: a38a229d_a3465e81
Bytes: 538
"These  functions  may  return  pointers  to statically allocated memory which may be overwritten by subsequent calls.  Alternatively, they may return a pointer to some part of path, so that the string referred to by path should not be modified or freed until the pointer returned by the function is no longer required."

Since it needs a non-const argument, I create a copy of dirName to do so.
Will C++ magically synthesize a std::string here, or are you suggesting I return the char*?
If I did the latter, I don't own the memory, do I?

61
Fri Apr 10 17:32:22 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_a3465e81
UUID: 636d8ab3_46ed9734
Bytes: 197
you're copying, so you don't care what happens next.

and, yes, the compiler recognizes that you're returning a T2 from a function declared to return T1, so it looks for an appropriate constructor.

72
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_d601598c
Bytes: 54
PLOG

(and the usual idiom is PLOG() << "... failed".)

72
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_d601598c
UUID: e3617abc_3a135de2
Bytes: 4
Done

104
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_986ffbf4
Bytes: 244
this would make sense if you actually _used_ the different values. but you just LOG "something went wrong" at the call sites, and this method already logs the exact failure (which i think is the better approach anyway).

so just switch to bool?

104
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_986ffbf4
UUID: e3617abc_9a6d4984
Bytes: 441
Originally I wasn't sure that I would always treat > 0 the same as 0 but it is close enough so I'll change it.

It felt wrong to return "true" from a deleteDir method when it didn't actually do it, so I had split it into (effectively) the tri-state of "failed badly" (-ve), "ok" (0) and "failed, but it's probably ok" (+ve).

This change does mean one less logging line where we are not 100% successful (e.g. != 0), but I can live with that.

127
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_faca86ea
Bytes: 3
+=?

127
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_faca86ea
UUID: 6394aac1_9e01b98d
Bytes: 4
Done

136
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_58bbb3d5
Bytes: 28
i don't think you need this.

136
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_58bbb3d5
UUID: 6394aac1_bed4b574
Bytes: 4
Done

139
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_7ab7b666
Bytes: 28
just &tempDirName[0] here...

139
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_7ab7b666
UUID: 6394aac1_ded981ab
Bytes: 4
Done

140
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_d6f879fe
Bytes: 5
== -1

140
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_d6f879fe
UUID: e3617abc_7a623586
Bytes: 198
Done.

My natural pessimism: "!= 0" is "anything that isn't explicitly success is failure", but "== -1" is "anything that isn't explicitly failure is success". I will always tend towards the former.

141
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_b8aaff7a
Bytes: 4
PLOG

141
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_b8aaff7a
UUID: e3617abc_9a2aa9f9
Bytes: 4
Done

142
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_faa3a622
Bytes: 11
and here...

142
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_faa3a622
UUID: a38a229d_20c404be
Bytes: 4
Done

147
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_56c469be
Bytes: 12
...and here.

147
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_56c469be
UUID: a38a229d_40c110ad
Bytes: 4
Done

149
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_f8948746
Bytes: 5
== -1

149
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_f8948746
UUID: a38a229d_e0d93cab
Bytes: 4
Done

152
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_f6aaddd0
Bytes: 51
just "return false" in the if and return true here.

152
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_f6aaddd0
UUID: e3617abc_9aa46930
Bytes: 123
This is always "true" by the new rules. >= 0 means "good enough" because we've at least moved the directory somewhere safe.

182
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_d6731918
Bytes: 90
the cool kids have switched to nullptr (http://en.cppreference.com/w/cpp/types/nullptr_t).

182
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_d6731918
UUID: 6394aac1_be0675a0
Bytes: 4
Done

185
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_31c9afa7
Bytes: 76
is unreadable? is that expected? (anyway, you wouldn't get ENOENT for that.)

185
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_31c9afa7
UUID: e3617abc_5a39f150
Bytes: 4
Done

189
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_3aea5e1e
Bytes: 106
don't log errno. strerror is better, and you're already doing that. (though, as elsewhere, just use PLOG.)

189
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_3aea5e1e
UUID: 6394aac1_feb47d37
Bytes: 4
Done

197
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_9ae71255
Bytes: 4
PLOG

197
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_9ae71255
UUID: 6394aac1_1eba0921
Bytes: 4
Done

208
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_f1e74728
Bytes: 80
missing function here that does fopen/error reporting/readZoneInfoHeader/fclose?

208
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_f1e74728
UUID: a38a229d_e32a26a8
Bytes: 29
Rearranged. Hopefully better.

210
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_11dd8b5d
Bytes: 36
constant for this 11 we keep seeing?

210
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_11dd8b5d
UUID: e3617abc_9a40e9f8
Bytes: 4
Done

215
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_5873b396
Bytes: 7
same as

215
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_5873b396
UUID: e3617abc_da9ee1e1
Bytes: 4
Done

216
Thu Apr 09 17:14:49 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_9890db1d
Bytes: 17
<< "; fixing..."?

216
Fri Apr 10 17:00:48 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_9890db1d
UUID: 6394aac1_5e20111d
Bytes: 4
Done

