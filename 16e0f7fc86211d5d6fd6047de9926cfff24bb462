Revision: 16e0f7fc86211d5d6fd6047de9926cfff24bb462
Patch-set: 1
File: libnativebridge/tests/Android.mk

24:0-25:35
Thu Jul 07 16:43:55 2016 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fd26b29b_a61ca662
Bytes: 63
this files are missing - can you please add them to the commit?

File: libnativeloader/native_loader.cpp

117
Tue May 31 03:55:57 2016 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3cbbe33c_83bdee28
Bytes: 188
create one or the other - there is no need in created host namespace, it is not going to be used anyways.

(and as an advantage - you no longer need access to default/anonymous namespaces)

117
Tue May 31 04:16:11 2016 +0000
Author: Zhenhua WANG <1104175@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3cbbe33c_83bdee28
UUID: 3cbbe33c_23dec280
Bytes: 988
>>> "it is not going to be used anyways."
We think it will be used by native bridge via the callback of native loader.

>>> "no longer need access to default/anonymous namespaces"
I think these is no relationship between the code here and default/anonymous namespaces.

Please note this, for apps run in emulated subsystem, native bridge and dynamic linker always need to load "same" libraries for different ABI. For example, if an app wants to load libc.so in the subsystem, native bridge loads a non-native libc.so and it calls dlopen() to load a native libc.so with at dynamic linker side. This is very important to the emulated subsystem, otherwise nothing works. Though this operation is transparent to apps.

With namespace introduced, namespace should be created at both dynamic linker and native bridge side. Only in this way, can the native bridge load libraries of different ABIs in peered namespace.

That's why "host namespace" and why default/anonymous namespaces are needed.

117
Tue May 31 04:18:21 2016 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3cbbe33c_23dec280
UUID: 3cbbe33c_a337529a
Bytes: 201
>>> "it is not going to be used anyways."
>We think it will be used by native bridge via the callback of native loader.

There is no need for that - there are no host arch libraries to load for NB app.

117
Tue May 31 04:39:30 2016 +0000
Author: Zhenhua WANG <1104175@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3cbbe33c_a337529a
UUID: 3cbbe33c_03545eb8
Bytes: 548
> >>> "it is not going to be used anyways."
 > >We think it will be used by native bridge via the callback of
 > native loader.
 > 
 > There is no need for that - there are no host arch libraries to
 > load for NB app.

NB app could have host arch libs. Apps packs cross ABI libs together, checks ABI and load ABI-matched libs.
Even apps don't, native bridge needs to load a host arch libc.so for a non-host-arch libc.so whenever it's loaded. native bridge lives in mix-ABI world and interacts with many modules of Android, host-arch lib is a must.

117
Tue May 31 08:26:36 2016 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3cbbe33c_03545eb8
UUID: 3cbbe33c_9edd412a
Bytes: 260
> NB app could have host arch libs. Apps packs cross ABI libs together, checks ABI and load ABI-matched libs.

I do not think this is true - if it is it would make NB app different from regular ones. Android does not allow mixing ABI for native libs in an app.

117
Tue May 31 08:34:02 2016 +0000
Author: Zhenhua WANG <1104175@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3cbbe33c_9edd412a
UUID: 3cbbe33c_9e042172
Bytes: 345
native bridge needs to load a host arch libc.so for a non-host-arch libc.so whenever the non-host-arch one is loaded. native bridge lives in mix-ABI world and interacts with many modules of Android, host-arch lib is a must for native bridge implementation. If Android provides mix-ABI support, the mapping of libraries and namespace is required.

117
Tue May 31 14:57:56 2016 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3cbbe33c_9e042172
UUID: 3cbbe33c_fe156d3e
Bytes: 252
Still application namespace does not have host libraries at least from the nativeloader point of view... if NB implementation requires them it can call linker behind the scenes to create one... there is no need to involve nativeloader in this is there?

