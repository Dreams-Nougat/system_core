Revision: bc4ffb7e5e07cad51227168dd47ac783bb703b7c
Patch-set: 4
File: include/ziparchive/zip_archive.h

128
Tue Aug 12 19:10:56 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16d4f72c_aa11b7bb
Bytes: 55
why pointers? it never makes sense to pass NULL, right?

128
Tue Aug 12 20:07:21 2014 +0000
Author: Piotr Jastrzebski <1052243@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 16d4f72c_aa11b7bb
UUID: 56baefee_01e1b05e
Bytes: 147
Narayan told me that ziparchive public API has to be c compatible. Are references c compatible? I thought not but I'm not an expert in c/c++ world.

128
Tue Aug 12 20:20:57 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 56baefee_01e1b05e
UUID: 56baefee_619f4cdc
Bytes: 115
oh, i didn't realize this was public API. i don't see any C code #include this, so why does this have to support C?

File: libziparchive/zip_archive.cc

395
Tue Aug 12 19:10:56 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76c53378_e84d7b85
Bytes: 93
can these functions be switched over to const ZipEntryName& instead of the pair of arguments?

395
Tue Aug 12 20:07:21 2014 +0000
Author: Piotr Jastrzebski <1052243@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76c53378_e84d7b85
UUID: 76c53378_c80ab7f4
Bytes: 40
I think they can since they are private.

930
Tue Aug 12 19:10:56 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56baefee_019410f3
Bytes: 23
no need for this check.

930
Tue Aug 12 20:07:21 2014 +0000
Author: Piotr Jastrzebski <1052243@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 56baefee_019410f3
UUID: 56baefee_a19c44e9
Bytes: 172
Thanks Elliott. I don't know why I was thinking that delete of a null pointer does something bad. I think I've read such thing somewhere but it must have been a bad source.

930
Tue Aug 12 20:20:57 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 56baefee_a19c44e9
UUID: 76c53378_488a270a
Bytes: 102
back in K&R days it wasn't portable. it's been fine since ANSI C, and it's always been allowed in C++.

