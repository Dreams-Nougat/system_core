Revision: bec4227400c6b344a8d9a9e1cc5dfd2a48728160
Patch-set: 2
File: fastboot/udp.cpp

125
Tue Feb 09 22:54:15 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fd977c52_cfcea1d1
Bytes: 126
or just use a deque if you don't need contiguity?

(is this actually worthwhile at all? why are we so keen to avoid resizing?)

125
Tue Feb 09 23:10:54 2016 +0000
Author: David Pursell <1078119@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fd977c52_cfcea1d1
UUID: 5da7a8bf_c3dbd662
Bytes: 733
TBH no it's not important right now, since I don't think we have any commands that sends a lot of data from the device to the host. This just adds some future-proofing in case fastboot adds a command that does this later on.

As a comparison, when I implemented the device side in Python, the difference between keeping a list of buffers vs. appending to a single buffer as packets came in was enormous (<10 seconds vs several minutes for downloading a partition). I haven't actually tried in C++ though, so those numbers may not apply here.

In any case I'm happy to leave this out if you think it adds more complexity than it's worth and/or if there's no chance we're going to implement reading large amounts of data from a device.

125
Wed Feb 10 00:17:19 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5da7a8bf_c3dbd662
UUID: dd92b865_3ac3dd56
Bytes: 184
does python have some pathological problem resizing vectors?

did i misread the implementation below? how do you end up with large numbers of outstanding packets? seemed synchronous...

125
Wed Feb 10 01:19:12 2016 +0000
Author: David Pursell <1078119@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd92b865_3ac3dd56
UUID: 5da7a8bf_c925b58a
Bytes: 583
I'm not sure, I could very well have had bugs in my code, it was a bit of a surprise.

The outstanding packets happen because a device can ACK and provide return data in the same packet. In this case, we're still in the fastboot write function so we need to buffer the returned data for the next fastboot read.

After thinking on it though, this is definitely an unnecessary optimization. It only saves ~50 round-trips in a "flashall" out of >100K. Tomorrow I'll change it to always separate write and read packets, that should let me remove all this packet buffering stuff.

Thanks!

313
Tue Feb 09 22:54:15 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5da7a8bf_e3ce1ad1
Bytes: 66
why not a while loop? do we actually want to send an empty packet?

387
Tue Feb 09 22:54:15 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bd83441c_73a832b4
Bytes: 70
i guess so. comment on the do loops above, since do loops are unusual?

387
Tue Feb 09 23:10:54 2016 +0000
Author: David Pursell <1078119@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bd83441c_73a832b4
UUID: 7da46cba_1981cfed
Bytes: 61
Will do, I was surprised myself to be finding a use for them.

