Revision: 95994031981498189f21e55346ccd3d87eef0ce5
Patch-set: 11
File: init/property_service.h

37:53-37:67
Tue Oct 25 21:27:59 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a1c7c880_bc190da0
Bytes: 228
rather than propagate this, can we just use const std::string& to carry around the length more cleanly? seems like the callers all just call strlen first anyway, so we may as well let std::string keep the length and data for us.

37:53-37:67
Tue Oct 25 21:49:17 2016 +0000
Author: Steven Moreland <1120458@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a1c7c880_bc190da0
UUID: a1c7c880_3c6a9dc9
Bytes: 156
We could, but, you would want to update everything in this file to std::string (which is a lot). Seems like we're starting to get out of scope with this CL.

37:53-37:67
Tue Oct 25 22:00:32 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a1c7c880_3c6a9dc9
UUID: a1c7c880_7cfc95c7
Bytes: 139
this is the only function we're touching now, so it's fine to just fix this one and leave the others until we have some reason to fix them.

37:53-37:67
Wed Oct 26 00:01:38 2016 +0000
Author: Steven Moreland <1120458@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a1c7c880_7cfc95c7
UUID: a1c7c880_7f32470f
Bytes: 1093
Yes, but the problem is that if you just change this one thing to a std::string, we'll be making additional copies of property names (in two places). Example:

before:

    case PROP_MSG_SETPROP:
        msg.name[PROP_NAME_MAX-1] = 0;
        msg.value[PROP_VALUE_MAX-1] = 0;

        if (!is_legal_property_name(msg.name, strlen(msg.name))) {
             ...
        }

after:

    case PROP_MSG_SETPROP:
        msg.name[PROP_NAME_MAX-1] = 0;
        msg.value[PROP_VALUE_MAX-1] = 0;

        std::string value(msg.name); // copies buffer

        if (!is_legal_property_name(value)) {
             ...
        }

This corresponds to an additional allocation every time a property is set/updated and every time the epoll handler for property_service receives the message PROP_MSG_SETPROP.

I'm not sure what the performance requirements of property_service are, but reading the code, they look pretty tight (the extra string concatenation in service.cpp seemed a little more reasonable because the number of services that exist are far fewer).

Are you sure you want me to make this change?

37:53-37:67
Wed Oct 26 00:16:20 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a1c7c880_7f32470f
UUID: a1c7c880_ff0777f9
Bytes: 474
you know that bug you were commenting on yesterday, about variable-length property support? this is that code. so it'll change to std::string sooner or later anyway :-)

(and if Android ever needs to cope with a high rate of property updates, that code is going to need an even bigger rewrite because it's currently bottlenecked by the main init polling loop.)

we shouldn't take a bad private interface and make it public when we can just make it a clear interface instead.

37:53-37:67
Wed Oct 26 01:52:55 2016 +0000
Author: Steven Moreland <1120458@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a1c7c880_ff0777f9
UUID: c1d83cb2_cab4238c
Bytes: 29
Alright, just making sure. :)

