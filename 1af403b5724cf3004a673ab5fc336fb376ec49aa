Revision: 1af403b5724cf3004a673ab5fc336fb376ec49aa
Patch-set: 2
File: adb/usb_linux.cpp

320:48-320:71
Fri Jul 24 02:37:51 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cd882a39_ed2c459a
Bytes: 322
I'm out of my area of expertise here (Linux usb code??), but my intuition says that if this times out, there is still a pending IO that is going to write to urb_out. What if we call usb_write()/usb_bulk_write() after doing a write that times out? Seems like they could conflict, but again, I'm out of my area of expertise.

320:48-320:71
Fri Jul 24 03:54:13 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cd882a39_ed2c459a
UUID: 2da466b9_f00b40da
Bytes: 66
ccross? was the old code accidentally right, just looping forever?

320:48-320:71
Fri Jul 24 04:20:04 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2da466b9_f00b40da
UUID: 0da7a2c0_2fef297c
Bytes: 299
Obviously, I will defer to you guys, but it really seems like after the timeout, the IO is still pending and the kernel is going to write to `urb' here, and that will race with the next subsequent call to usb_bulk_write(). Perhaps this never occurs in practice due to some buffering or device speed.

320:48-320:71
Fri Jul 24 18:56:45 2015 +0000
Author: Colin Cross <1002751@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0da7a2c0_2fef297c
UUID: ad977653_d5746ec4
Bytes: 257
I'm not too familiar with usbfs, but a quick look at the kernel code suggests that the USBDEVFS_REAPURB ioctl is going to write to urb->buffer, so it better be valid.  USBDEVFS_DISCARDURB might be a good idea to remove the buffer from the kernel on timeout.

320:48-320:71
Fri Jul 24 19:35:55 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ad977653_d5746ec4
UUID: 4d86fa2e_92a922dd
Bytes: 197
i've just added a TODO for now, but raised http://b/22721206 to come back to this.

(in the h->dead case, the other thread will have done the discard for us, but in the timeout case, nothing does.)

321:19-321:21
Fri Jul 24 02:37:51 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad977653_6cc4dbd7
Bytes: 74
Maybe set errno for the benefit of usb_write() which dumps errno/strerror?

321:19-321:21
Fri Jul 24 03:54:13 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ad977653_6cc4dbd7
UUID: 0da7a2c0_0f6d05ab
Bytes: 4
Done

324:19-324:62
Fri Jul 24 02:37:51 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d83be1d_6a8597e2
Bytes: 393
It is my (weak) understanding that status is an error-code (is that right?). So if it is non-zero, there is an error and then we return 0? That sounds wrong. I think we should set errno = urb->status and then return -1? (BTW, to top this all off: check out transport.cpp:input_thread(): it ignores the return value from write_to_remote so it assumes that write errors bubble up some other way)

324:19-324:62
Fri Jul 24 03:54:13 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d83be1d_6a8597e2
UUID: 6d83be1d_6a76774f
Bytes: 238
yeah, that's not what the old code was doing, but that definitely sounds right. https://www.kernel.org/doc/Documentation/usb/URB.txt says that status is 0 for success or a negative errno value, so that gives us something to use for errno.

387:22-387:24
Fri Jul 24 02:37:51 2015 +0000
Author: Spencer Low <1065256@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cd882a39_adb95dc5
Bytes: 72
Maybe errno = urb->status for the benefit of usb_read which dumps errno?

387:22-387:24
Fri Jul 24 03:54:13 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cd882a39_adb95dc5
UUID: ed8dee45_d1bc86a5
Bytes: 4
Done

