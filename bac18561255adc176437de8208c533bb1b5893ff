Revision: bac18561255adc176437de8208c533bb1b5893ff
Patch-set: 5
File: logd/LogStatistics.cpp

183:4-197:18
Fri Mar 20 20:30:34 2015 +0000
Author: Greg Hackmann <1015340@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 66259842_b22909b7
Bytes: 235
This is just complex/fragile enough that copy-and-pasting it feels like a bad idea.  If you can easily break this out into a single helper (using C++ templates to handle the different return value types) then I'd feel better with that.

183:4-197:18
Fri Mar 20 21:14:01 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 66259842_b22909b7
UUID: 66259842_521e75e7
Bytes: 467
Agreed, I was chatting with you about an idea to wrap an internal hash type around the BasicHashtable class but did not take any action.

I would like to have some time to get an education on the libc++ alternative for hash tables as BasicHashtable was freshly introduced into logd in the previous CL. Before I started using it, there was effectively only _one_ other user of BasicHashtable. That low of a population bothered me then, and bothers me even more now ...

183:4-197:18
Fri Mar 20 23:09:57 2015 +0000
Author: Greg Hackmann <1015340@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 66259842_521e75e7
UUID: 460974dc_7aab3982
Bytes: 320
C++11 has std::unordered_map.

Like I said, I think you should get this patch stack in and then do a project-wide sweep to get rid of C-style and libutils-style data structures.  If all you do is modify these new patches to use libc++, you'll just wind up with logd doing things *three* ways instead of the existing two.

388:8-388:72
Fri Mar 20 20:30:34 2015 +0000
Author: Greg Hackmann <1015340@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 46825452_63473da8
Bytes: 155
Likewise it looks like you could break this out into a templatized helper.  Though this is more straightforward so I'm not sure how critical that would be.

388:0-403:13
Fri Mar 20 21:14:01 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 068cdc85_b6031ec5
Bytes: 34
I agree, this should be templated.

File: logd/LogStatistics.h

73:9-73:15
Fri Mar 20 20:30:34 2015 +0000
Author: Greg Hackmann <1015340@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 46825452_c37e29df
Bytes: 184
enablePidStats?

If I'm reading this right, this selectively enables the PID statistics, but UID statistics are unconditionally enabled.  Which would make this variable name deceptive.

73:9-73:15
Fri Mar 20 21:14:01 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 46825452_c37e29df
UUID: 46825452_9ee95a2c
Bytes: 949
The only essential statistics (in support of worst-UID pruning) is the UID statistics. There is no analog for this statistic performed in post-processing since UID is internal to the logger. The sizes are necessary for the general pruning algorithm; they are essential for the operations of the logger.

Everything else is optional, adds memory pressure and will be turned off on "user" builds. We have a request to add a per-event-tag report as well in the future, another developer is considering adding it himself rather than waiting for me to get to it.

For these two reasons alone I would prefer to leave this as a generic label.

I am lukewarm on creeping statistics featurism since the per-PID table can actually be generated by post-processing the logcat output since all the data is present. The same can be said of the per-tag statistics being requested. Only rationalization is that the data is useful and _someone_ wants them generated.

