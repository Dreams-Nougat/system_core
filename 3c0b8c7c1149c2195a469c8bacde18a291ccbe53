Revision: 3c0b8c7c1149c2195a469c8bacde18a291ccbe53
Patch-set: 1
File: libutils/SharedBuffer.h

108
Wed May 18 17:48:00 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d7f6229d_9a38312a
Bytes: 554
is what they were really trying to say (sizeof(SharedBuffer) % sizeof(void*) == 0)?

i think "sized" in the comment didn't mean "== 16", rather "any appropriate size", and "correct alignment" didn't mean 16-byte aligned, but just "the next multiple of sizeof(void*) [which right now in my LP32-only world just happens to == 16]".

does moving mSize cause any binary compatibility problems? (i'm not sure whether any blobs have an inlined size() but are using the out of line alloc()...)

maybe drop the reserved fields altogether and round up in alloc()?

108
Wed May 18 20:17:50 2016 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d7f6229d_9a38312a
UUID: d7f6229d_da6119c7
Bytes: 740
Interesting questions.

I presumed it should be 16 (or a multiple) for the following reasons: The presence of the mReserved array didn't otherwise make any sense to me. And, at least on x86, the usual (non-Android (?)) convention is that allocated memory is 16 byte aligned to support vector units that need alignment. Note that the code below uses "this + 1" to compute the beginning of the payload data. What's the maximum alignment requirement on ARM?

One alternative is to leave mSize in its old place, but conditionally remove mReserved for 64 bit.  That should still result in a 16 byte size with reasonable ABI alignment conventions, though via more complicated reasoning.  Another alternative is to just remove the 16 byte comment.

108
Wed May 18 20:23:56 2016 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d7f6229d_da6119c7
UUID: d7f6229d_8571f69a
Bytes: 188
[+cferris] as usual sufferer from alignment issues (and who knows what our corresponding heap guarantees have been --- "this should match the heap" sounds like a very convincing argument).

