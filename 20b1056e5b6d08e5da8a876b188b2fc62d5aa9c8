Revision: 20b1056e5b6d08e5da8a876b188b2fc62d5aa9c8
Patch-set: 1
File: logd/LogBuffer.cpp

262:17-262:31
Mon Apr 20 15:57:21 2015 +0000
Author: John Reck <1010103@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f055c239_06fea431
Bytes: 78
Why not std::set or std::unordered_set? We have a pretty good STL library now.

262:17-262:31
Mon Apr 20 16:15:09 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f055c239_06fea431
UUID: 305cba63_adc355b6
Bytes: 286
Been asked before, other code here uses BasicHashtable, so we continue to keep logd light-weight by not incorporating multiple hash-table mechanisms. We promise to port all usage over to unordered_set on cleanup. logd has no dependence on libc++ at the moment either by original design.

365:0-383:13
Mon Apr 20 17:55:09 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 305cba63_130f0435
Bytes: 95
There has to be an efficient way to template/inline/subroutine this, and the merge check below?

388:16-388:29
Mon Apr 20 17:55:09 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 305cba63_d3574c29
Bytes: 271
Plan B: Instead of clearing at the various junctures in the loop, we could instead 'age' the entries in the check above and below, if the last 'dropped' message is less than 200ms away, for example, we could merge to it even if we do not have a contiguous set of entries.

