Revision: bf3a5b222ec2de0d6a26b8beb54ef7744d2dbd7f
Patch-set: 2
File: libnetutils/dhcpclient.c

201
Thu Aug 09 16:59:13 2012 +0000
Author: Dima Zavin <1000413@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: AAAIEX//+LU=
Bytes: 232
this change in this file shouldn't be necessary. The only thing that's needed is the ntohl. I don't see how harcoding a memcpy(x,y,4) is any better than just dereferencing the ptr as a uint32_t *. Please revert changes in this file.

201
Thu Aug 09 17:33:49 2012 +0000
Author: Raghu Gandham <1003296@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: AAAIEX//+LU=
UUID: AAAIEX//+Kc=
Bytes: 231
memcpy is more Endian friendly. In the past (Froyo time-frame) MIPS team ported Android to work on Big-endian MIPS boards. 
If you insist, I can revert the change in this file as it does not effect any configurations we test today.

201
Thu Aug 09 17:50:28 2012 +0000
Author: Dima Zavin <1000413@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: AAAIEX//+Kc=
UUID: AAAIH3//+n4=
Bytes: 516
How is memcpy more endian friendly in this case? You are never accessing any of the bytes directly, you are just dereferencing a 4-byte opaque ptr and passing it as on opaque 4-byte blob to ntohl in the function call below. You never perform bit/byte operations on it until then. So, memcpy is superfluous here.

The only benefit to using memcpy here is that it is safer on platforms with hard alignment restrictions, as x could be unaligned here. So for that purpose, we should leave the memcpy, not for endianness.

