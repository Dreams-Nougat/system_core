Revision: aa77b8674b80d24b04c57901057568349400d2da
Patch-set: 3
File: liblog/Android.mk

76
Mon Feb 23 17:25:51 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 48a17a0b_f12c828d
Bytes: 107
"...and is meant for use in the recovery image."? it would be a mistake for anyone else to use this, right?

76
Mon Feb 23 18:39:16 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 48a17a0b_f12c828d
UUID: a880367a_849fa8f8
Bytes: 640
I think this is premature since the recovery image could easily deploy logd if we moved it up the chain into the ramdisk. The idea should be split into another CL?

stderr is considered a /dev/null on the Recovery image. The current logging library will send the logging information to pstore _and_ logd (if it exists), and pstore information can be retrieved on reboot; a better solution than stderr. What about sending to /dev/kmsg? All these questions add doubt to the value of liblog-stderr for the Recovery image.

The static library is less useful, an accompanying shared library should be built for the recovery image to use perhaps?

File: liblog/stderr_log.c

17
Mon Feb 23 17:25:51 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 48a17a0b_31472a45
Bytes: 39
this whole comment can just be removed.

232:3-232:60
Mon Feb 23 18:39:16 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 08722291_7425e8a2
Bytes: 251
Why not leverage logprint.c?

I know not perfect or completely adaptable as-is, but it can form a standard for translating logging messages to logcat format.

There are repeating themes in this call that match andorid_log_printLogLine for instance ...

346:0-346:4
Mon Feb 23 18:39:16 2015 +0000
Author: Mark Salyzyn <1032276@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a880367a_0422b818
Bytes: 11
whtie space

